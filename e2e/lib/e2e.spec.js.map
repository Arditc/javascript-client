{"version":3,"sources":["../es6/e2e.spec.js"],"names":[],"mappings":";;AAAA,QAAQ,wBAAR;AACA,IAAM,QAAQ,OAAO,OAAP;;;;AAId,IAAM,QAAQ,QAAQ,YAAR,CAAR;;AAEN,IAAM,OAAO,QAAQ,MAAR,CAAP;AACN,IAAM,MAAM,QAAQ,sCAAR,CAAN;;AAEN,IAAM,oBAAoB,QAAQ,oCAAR,CAApB;AACN,IAAM,oBAAoB,QAAQ,+CAAR,CAApB;AACN,IAAM,iBAAiB,QAAQ,0CAAR,CAAjB;;AAEN,MAAM,IAAN,CAAW,6BAAX,EAA0C,iBAA1C;AACA,MAAM,IAAN,CAAW,wCAAX,EAAqD,iBAArD;AACA,MAAM,IAAN,CAAW,mCAAX,EAAgD,cAAhD;;AAEA,KAAK,MAAL,EAAa,kBAAU;AACrB,MAAM,MAAM,MAAM;AAChB,UAAM;AACJ,wBAAkB,cAAlB;AACA,WAAK,kBAAL;KAFF;AAIA,eAAW;AACT,2BAAqB,IAArB;AACA,2BAAqB,IAArB;AACA,0BAAoB,OAApB;AACA,8BAAwB,OAAxB;KAJF;GALU,CAAN,CADe;;AAcrB,SAAO,KAAP,CAAa,IAAI,YAAJ,CAAiB,WAAjB,CAAb,EAA4C,SAA5C,EAAuD,2CAAvD,EAdqB;AAerB,SAAO,KAAP,CAAa,IAAI,YAAJ,CAAiB,WAAjB,CAAb,EAA4C,SAA5C,EAAuD,2CAAvD,EAfqB;AAgBrB,SAAO,KAAP,CAAa,IAAI,YAAJ,CAAiB,WAAjB,CAAb,EAA4C,SAA5C,EAAuD,2CAAvD,EAhBqB;AAiBrB,SAAO,KAAP,CAAa,IAAI,YAAJ,CAAiB,SAAjB,CAAb,EAA0C,SAA1C,EAAqD,yCAArD,EAjBqB;;AAmBrB,MAAI,KAAJ,GAAY,IAAZ,CAAiB,YAAY;AAC3B,WAAO,KAAP,CAAa,IAAI,YAAJ,CAAiB,WAAjB,CAAb,EAA4C,aAA5C,EAA2D,0CAA3D,EAD2B;AAE3B,WAAO,KAAP,CAAa,IAAI,YAAJ,CAAiB,WAAjB,CAAb,EAA4C,SAA5C,EAAuD,2CAAvD,EAF2B;AAG3B,WAAO,KAAP,CAAa,IAAI,YAAJ,CAAiB,WAAjB,CAAb,EAA4C,IAA5C,EAAkD,2CAAlD,EAH2B;AAI3B,WAAO,KAAP,CAAa,IAAI,YAAJ,CAAiB,SAAjB,CAAb,EAA0C,IAA1C,EAAgD,yCAAhD,EAJ2B;AAK3B,WAAO,GAAP,GAL2B;GAAZ,CAAjB,CAnBqB;CAAV,CAAb","file":"e2e.spec.js","sourcesContent":["require('@splitsoftware/splitio');\nconst Split = global.splitio;\n\n// This override the default implementation, so you MUST to be sure you include\n// this AFTER the require('isomorphic-fetch')\nconst fetch = require('fetch-mock');\n\nconst tape = require('tape');\nconst url = require('@splitsoftware/splitio-utils/lib/url');\n\nconst splitChangesMock1 = require('./mocks/splitchanges.since.-1.json');\nconst splitChangesMock2 = require('./mocks/splitchanges.since.1457552620999.json');\nconst mySegmentsMock = require('./mocks/mysegments.facundo@split.io.json');\n\nfetch.mock(url(`/splitChanges?since=-1`), splitChangesMock1);\nfetch.mock(url(`/splitChanges?since=1457552620999`), splitChangesMock2);\nfetch.mock(url(`/mySegments/facundo@split.io`), mySegmentsMock);\n\ntape('E2E ', assert => {\n  const sdk = Split({\n    core: {\n      authorizationKey: '<fake-token>',\n      key: 'facundo@split.io'\n    },\n    scheduler: {\n      featuresRefreshRate: 1000,\n      segmentsRefreshRate: 1000,\n      metricsRefreshRate: 3000000,\n      impressionsRefreshRate: 3000000\n    }\n  });\n\n  assert.equal(sdk.getTreatment('blacklist'), 'control', 'Ask for `blacklist` before initialization');\n  assert.equal(sdk.getTreatment('whitelist'), 'control', 'Ask for `whitelist` before initialization');\n  assert.equal(sdk.getTreatment('splitters'), 'control', 'Ask for `splitters` before initialization');\n  assert.equal(sdk.getTreatment('qc_team'), 'control', 'Ask for `qc_team` before initialization');\n\n  sdk.ready().then(function () {\n    assert.equal(sdk.getTreatment('blacklist'), 'not_allowed', 'Ask for `blacklist` after initialization');\n    assert.equal(sdk.getTreatment('whitelist'), 'allowed', 'Ask for `whitelist` before initialization');\n    assert.equal(sdk.getTreatment('splitters'), 'on', 'Ask for `splitters` before initialization');\n    assert.equal(sdk.getTreatment('qc_team'), 'no', 'Ask for `qc_team` before initialization');\n    assert.end();\n  });\n});\n"]}