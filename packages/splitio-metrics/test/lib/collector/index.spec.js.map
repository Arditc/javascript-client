{"version":3,"sources":["../../es6/collector/index.spec.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,YAAY,QAAQ,wBAAR,CAAZ;;AAEJ,KAAK,wCAAL,EAA+C,kBAAU;AACvD,MAAI,KAAK,IAAI,SAAJ,EAAL,CADmD;;AAGvD,KAAG,KAAH,CAAS,CAAT,EAHuD;AAIvD,KAAG,KAAH,CAAS,IAAT,EAJuD;AAKvD,KAAG,KAAH,CAAS,IAAT,EALuD;;AAOvD,SAAO,IAAP,CAAY,GAAG,QAAH,GAAc,CAAd,MAAqB,CAArB,EAAwB,6BAApC,EAPuD;;AASvD,KAAG,KAAH,CAAS,IAAT,EATuD;AAUvD,SAAO,IAAP,CAAY,GAAG,QAAH,GAAc,CAAd,MAAqB,CAArB,EAAwB,6BAApC,EAVuD;;AAYvD,KAAG,KAAH,CAAS,IAAT,EAZuD;AAavD,SAAO,IAAP,CAAY,GAAG,QAAH,GAAc,CAAd,MAAqB,CAArB,EAAwB,6BAApC,EAbuD;;AAevD,KAAG,KAAH,CAAS,MAAT,EAfuD;AAgBvD,SAAO,IAAP,CAAY,GAAG,QAAH,GAAc,EAAd,MAAsB,CAAtB,EAAyB,8BAArC,EAhBuD;;AAkBvD,KAAG,KAAH,CAAS,MAAT,EAlBuD;AAmBvD,SAAO,IAAP,CAAY,GAAG,QAAH,GAAc,EAAd,MAAsB,CAAtB,EAAyB,8BAArC,EAnBuD;;AAqBvD,KAAG,KAAH,CAAS,OAAT,EArBuD;AAsBvD,SAAO,IAAP,CAAY,GAAG,QAAH,GAAc,EAAd,MAAsB,CAAtB,EAAyB,8BAArC,EAtBuD;;AAwBvD,SAAO,GAAP,GAxBuD;CAAV,CAA/C;;AA2BA,KAAK,wCAAL,EAA+C,kBAAU;AACvD,MAAI,KAAK,IAAI,SAAJ,EAAL,CADmD;;AAGvD,KAAG,KAAH,CAAS,CAAT,EAHuD;AAIvD,KAAG,KAAH,CAAS,IAAT,EAJuD;AAKvD,KAAG,KAAH,CAAS,IAAT,EALuD;AAMvD,KAAG,KAAH,CAAS,IAAT,EANuD;AAOvD,KAAG,KAAH,CAAS,IAAT,EAPuD;AAQvD,KAAG,KAAH,CAAS,MAAT,EARuD;AASvD,KAAG,KAAH,CAAS,MAAT,EATuD;AAUvD,KAAG,KAAH,CAAS,OAAT,EAVuD;;AAYvD,SAAO,IAAP,CACE,GAAG,KAAH,GAAW,QAAX,GAAsB,MAAtB,CAA6B,UAAC,GAAD,EAAM,CAAN;WAAY,OAAO,CAAP;GAAZ,EAAsB,CAAnD,MAA0D,CAA1D,EACA,wCAFF,EAZuD;;AAiBvD,SAAO,GAAP,GAjBuD;CAAV,CAA/C;;AAoBA,KAAK,+CAAL,EAAsD,kBAAU;AAC9D,MAAI,IAAI,IAAI,SAAJ,EAAJ,CAD0D;AAE9D,MAAI,SAAS,KAAK,SAAL,CAAe,CAAf,CAAT,CAF0D;AAG9D,MAAI,SAAS,KAAK,SAAL,CAAe,EAAE,QAAF,EAAf,CAAT,CAH0D;;AAK9D,SAAO,IAAP,CAAY,WAAW,MAAX,EAAmB,0DAA/B,EAL8D;AAM9D,SAAO,GAAP,GAN8D;CAAV,CAAtD","file":"index.spec.js","sourcesContent":["'use strict';\n\nlet tape = require('tape');\nlet Collector = require('../../../lib/collector');\n\ntape('COLLECTOR should count based on ranges', assert => {\n  let c1 = new Collector();\n\n  c1.track(1);\n  c1.track(1000);\n  c1.track(1001);\n\n  assert.true(c1.counters()[0] === 3, 'the bucket #0 should have 3');\n\n  c1.track(1500);\n  assert.true(c1.counters()[1] === 1, 'the bucket #1 should have 1');\n\n  c1.track(3456);\n  assert.true(c1.counters()[3] === 1, 'the bucket #3 should have 1');\n\n  c1.track(985251);\n  assert.true(c1.counters()[16] === 1, 'the bucket #17 should have 1');\n\n  c1.track(985271);\n  assert.true(c1.counters()[17] === 1, 'the bucket #18 should have 1');\n\n  c1.track(7481830);\n  assert.true(c1.counters()[22] === 1, 'the bucket #22 should have 1');\n\n  assert.end();\n});\n\ntape('COLLECTOR should count based on ranges', assert => {\n  let c1 = new Collector();\n\n  c1.track(1);\n  c1.track(1000);\n  c1.track(1001);\n  c1.track(1500);\n  c1.track(3456);\n  c1.track(985251);\n  c1.track(985271);\n  c1.track(7481830);\n\n  assert.true(\n    c1.clear().counters().reduce((sum, c) => sum += c, 0) === 0,\n    'after call clear, counters should be 0'\n  );\n\n  assert.end();\n});\n\ntape('COLLECTOR should support custom toJSON method', assert => {\n  let c = new Collector();\n  let hooked = JSON.stringify(c);\n  let manual = JSON.stringify(c.counters());\n\n  assert.true(hooked === manual, 'toJSON should expose the counters as an array of numbers');\n  assert.end();\n});\n"]}