{"version":3,"sources":["../../es6/utils/binarySearch.spec.js"],"names":[],"mappings":"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","file":"binarySearch.spec.js","sourcesContent":["'use strict';\n\nlet tape = require('tape');\nlet bs = require('../../../lib/utils/binarySearch');\n\ntape('BINARY SEARCH / given [1,3,5,7,10] as dataset look for several elements', assert => {\n  let searchFor = bs.bind(null, [1, 3, 5, 7, 10]);\n  let index = undefined;\n  let value = -1;\n\n  index = searchFor(value);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  value++; // 0\n  index = searchFor(value);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  value++; // 1\n  index = searchFor(value);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  value++; // 2\n  index = searchFor(value);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  value++; // 3\n  index = searchFor(value);\n  assert.true(index === 1, `expected value 1, returned ${index}`);\n\n  value++; // 4\n  index = searchFor(value);\n  assert.true(index === 1, `expected value 1, returned ${index}`);\n\n  value++; // 5\n  index = searchFor(value);\n  assert.true(index === 2, `expected value 2, returned ${index}`);\n\n  value++; // 6\n  index = searchFor(value);\n  assert.true(index === 2, `expected value 2, returned ${index}`);\n\n  value++; // 7\n  index = searchFor(value);\n  assert.true(index === 3, `expected value 3, returned ${index}`);\n\n  value++; // 8\n  index = searchFor(value);\n  assert.true(index === 3, `expected value 3, returned ${index}`);\n\n  value++; // 9\n  index = searchFor(value);\n  assert.true(index === 3, `expected value 3, returned ${index}`);\n\n  value++; // 10\n  index = searchFor(value);\n  assert.true(index === 4, `expected value 4, returned ${index}`);\n\n  value++; // 11\n  index = searchFor(value);\n  assert.true(index === 4, `expected value 4, returned ${index}`);\n\n  value++; // 12\n  index = searchFor(value);\n  assert.true(index === 4, `expected value 4, returned ${index}`);\n\n  assert.end();\n});\n\ntape('BINARY SEARCH / run test using system keys', assert => {\n  const KEYS = [\n    1000,    1500,    2250,   3375,    5063,\n    7594,    11391,   17086,  25629,   38443,\n    57665,   86498,   129746, 194620,  291929,\n    437894,  656841,  985261, 1477892, 2216838,\n    3325257, 4987885, 7481828\n  ];\n\n  let searchFor = bs.bind(null, KEYS);\n\n  let index = searchFor(10);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  index = searchFor(1001);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  index = searchFor(1499);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  index = searchFor(1500);\n  assert.true(index === 1, `expected value 0, returned ${index}`);\n\n  index = searchFor(2200);\n  assert.true(index === 1, `expected value 0, returned ${index}`);\n\n  index = searchFor(2251);\n  assert.true(index === 2, `expected value 0, returned ${index}`);\n\n  assert.end();\n});\n"]}