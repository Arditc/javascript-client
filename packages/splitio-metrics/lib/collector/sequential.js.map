{"version":3,"sources":["../../es6/collector/sequential.js"],"names":[],"mappings":"WAAY;;AAEZ,SAAS,mBAAT,GAA+B;AAC7B,OAAK,OAAL,GAAe,EAAf,CAD6B;CAA/B;;;AAKA,oBAAoB,SAApB,CAA8B,QAA9B,GAAyC,gCAAiC;AACxE,SAAO,KAAK,OAAL,CADiE;CAAjC;;;AAKzC,oBAAoB,SAApB,CAA8B,KAA9B,GAAsC,UAAU,qBAAV,eAA+C;AACnF,SAAO,KAAK,OAAL,CAAa,IAAb,CAAkB,OAAlB,CAAP,CADmF;CAA/C;;;AAKtC,oBAAoB,SAApB,CAA8B,KAA9B,GAAsC,sCAAuC;AAC3E,OAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB,CAD2E;;AAG3E,SAAO,IAAP,CAH2E;CAAvC;;;AAOtC,oBAAoB,SAApB,CAA8B,MAA9B,GAAuC,YAAY;AACjD,SAAO,KAAK,OAAL,CAD0C;CAAZ;;AAIvC,OAAO,OAAP,GAAiB,SAAS,0BAAT,GAAsC;AACrD,SAAO,IAAI,mBAAJ,EAAP,CADqD;CAAtC","file":"sequential.js","sourcesContent":["/* @flow */ 'use strict';\n\nfunction SequentialCollector() {\n  this.counter = [];\n}\n\n// Get latency sequence\nSequentialCollector.prototype.counters = function () /*: Array<number> */ {\n  return this.counter;\n};\n\n// Store latency in sequential order\nSequentialCollector.prototype.track = function (latency /*: number */) /*: number */ {\n  return this.counter.push(latency);\n};\n\n// Recycle the collector (reset using 0 for all the counters)\nSequentialCollector.prototype.clear = function () /*: SequentialCollector */ {\n  this.counter.length = 0;\n\n  return this;\n};\n\n// Hook JSON.stringify to expose the state of the counters\nSequentialCollector.prototype.toJSON = function () {\n  return this.counter;\n};\n\nmodule.exports = function SequentialCollectorFactory() {\n  return new SequentialCollector();\n}\n"]}