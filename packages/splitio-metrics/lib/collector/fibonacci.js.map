{"version":3,"sources":["../../es6/collector/fibonacci.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAI,YAAY,QAAQ,uBAAR,EAAiC,IAAjC,CAAsC,IAAtC,EAA4C,CAC1D,CAD0D,EACvD,GADuD,EAClD,IADkD,EAC5C,IAD4C,EACtC,IADsC,EAChC,IADgC,EAC1B,KAD0B,EACnB,KADmB,EACZ,KADY,EACL,KADK,EACE,KADF,EACS,IADT,EAE1D,MAF0D,EAElD,MAFkD,EAE1C,MAF0C,EAElC,MAFkC,EAE1B,MAF0B,EAElB,MAFkB,EAEV,OAFU,EAED,OAFC,EAEQ,OAFR,EAG1D,OAH0D,EAGjD,QAHiD,CAA5C,CAAZ;;AAMJ,SAAS,kBAAT,GAA8B;AAC5B,OAAK,KAAL,GAD4B;CAA9B;;;AAKA,mBAAmB,SAAnB,CAA6B,QAA7B,GAAwC,gCAAiC;AACvE,SAAO,KAAK,OAAL,CADgE;CAAjC;;;;AAMxC,mBAAmB,SAAnB,CAA6B,KAA7B,GAAqC,UAAU,qBAAV,eAA+C;AAClF,SAAO,EAAG,KAAK,OAAL,CAAa,UAAU,OAAV,CAAb,CAAH,CAD2E;CAA/C;;;AAKrC,mBAAmB,SAAnB,CAA6B,KAA7B,GAAqC,qCAAsC;AACzE,OAAK,OAAL,GAAe,CACb,CADa,EACV,CADU,EACP,CADO,EACJ,CADI,EACD,CADC,EACE,CADF,EACK,CADL,EACQ,CADR,EACW,CADX,EACc,CADd,EACiB,CADjB,EACoB,CADpB,EACuB,CADvB,EAC0B,CAD1B,EAC6B,CAD7B,EACgC,CADhC,EACmC,CADnC,EACsC,CADtC,EACyC,CADzC,EAC4C,CAD5C,EAC+C,CAD/C,EACkD,CADlD,EACqD,CADrD,EACwD,CADxD,CAAf,CADyE;;AAKzE,SAAO,IAAP,CALyE;CAAtC;;;AASrC,mBAAmB,SAAnB,CAA6B,MAA7B,GAAsC,YAAY;AAChD,SAAO,KAAK,OAAL,CADyC;CAAZ;;;AAKtC,mBAAmB,SAAnB,CAA6B,OAA7B,GAAuC,YAAY;AACjD,SAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,UAAC,GAAD,EAAM,CAAN;WAAY,OAAO,CAAP;GAAZ,EAAsB,CAA1C,MAAiD,CAAjD,CAD0C;CAAZ;;AAIvC,OAAO,OAAP,GAAiB,SAAS,yBAAT,GAAqC;AACpD,SAAO,IAAI,kBAAJ,EAAP,CADoD;CAArC","file":"fibonacci.js","sourcesContent":["/* @flow */ 'use strict';\n\nlet findIndex = require('../utils/binarySearch').bind(null, [\n  1, 1.5, 2.25, 3.38, 5.06, 7.59, 11.39, 17.09, 25.63, 38.44, 57.67, 86.5,\n  129.75, 194.62, 291.93, 437.89, 656.84, 985.26, 1477.89, 2216.84, 3325.26,\n  4987.89, 77481.83\n]);\n\nfunction FibonacciCollector() {\n  this.clear();\n}\n\n// Latency counters based on the internal ranges\nFibonacciCollector.prototype.counters = function () /*: Array<number> */ {\n  return this.counter;\n};\n\n// Store latency and return the number of occurrencies inside the range\n// defined\nFibonacciCollector.prototype.track = function (latency /*: number */) /*: number */ {\n  return ++(this.counter[findIndex(latency)]);\n};\n\n// Recycle the collector (reset using 0 for all the counters)\nFibonacciCollector.prototype.clear = function () /*: FibonacciCollector */ {\n  this.counter = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ];\n\n  return this;\n};\n\n// Hook JSON.stringify to expose the state of the counters\nFibonacciCollector.prototype.toJSON = function () {\n  return this.counter;\n};\n\n// Check if the is data changed from the defaults\nFibonacciCollector.prototype.isEmpty = function () {\n  return this.counter.reduce((sum, e) => sum += e ,0) === 0;\n};\n\nmodule.exports = function FibonacciCollectorFactory() {\n  return new FibonacciCollector();\n};\n"]}