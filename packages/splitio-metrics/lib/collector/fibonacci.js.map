{"version":3,"sources":["../../es6/collector/fibonacci.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAI,YAAY,QAAQ,uBAAR,EAAiC,IAAjC,CAAsC,IAAtC,EAA4C,CAC1D,IAD0D,EACjD,IADiD,EACxC,IADwC,EAChC,IADgC,EACvB,IADuB,EAE1D,IAF0D,EAEjD,KAFiD,EAExC,KAFwC,EAEhC,KAFgC,EAEvB,KAFuB,EAG1D,KAH0D,EAGjD,KAHiD,EAGxC,MAHwC,EAGhC,MAHgC,EAGvB,MAHuB,EAI1D,MAJ0D,EAIjD,MAJiD,EAIxC,MAJwC,EAIhC,OAJgC,EAIvB,OAJuB,EAK1D,OAL0D,EAKjD,OALiD,EAKxC,OALwC,CAA5C,CAAZ;;AAQJ,SAAS,kBAAT,GAA8B;AAC5B,OAAK,KAAL,GAD4B;CAA9B;;;AAKA,mBAAmB,SAAnB,CAA6B,QAA7B,GAAwC,gCAAiC;AACvE,SAAO,KAAK,OAAL,CADgE;CAAjC;;;;AAMxC,mBAAmB,SAAnB,CAA6B,KAA7B,GAAqC,UAAU,qBAAV,eAA+C;AAClF,SAAO,EAAG,KAAK,OAAL,CAAa,UAAU,OAAV,CAAb,CAAH,CAD2E;CAA/C;;;AAKrC,mBAAmB,SAAnB,CAA6B,KAA7B,GAAqC,qCAAsC;AACzE,OAAK,OAAL,GAAe,CACb,CADa,EACV,CADU,EACP,CADO,EACJ,CADI,EACD,CADC,EACE,CADF,EACK,CADL,EACQ,CADR,EACW,CADX,EACc,CADd,EACiB,CADjB,EACoB,CADpB,EACuB,CADvB,EAC0B,CAD1B,EAC6B,CAD7B,EACgC,CADhC,EACmC,CADnC,EACsC,CADtC,EACyC,CADzC,EAC4C,CAD5C,EAC+C,CAD/C,EACkD,CADlD,EACqD,CADrD,EACwD,CADxD,CAAf,CADyE;;AAKzE,SAAO,IAAP,CALyE;CAAtC;;;AASrC,mBAAmB,SAAnB,CAA6B,MAA7B,GAAsC,YAAY;AAChD,SAAO,KAAK,OAAL,CADyC;CAAZ;;AAItC,OAAO,OAAP,GAAiB,SAAS,yBAAT,GAAqC;AACpD,SAAO,IAAI,kBAAJ,EAAP,CADoD;CAArC","file":"fibonacci.js","sourcesContent":["/* @flow */ 'use strict';\n\nlet findIndex = require('../utils/binarySearch').bind(null, [\n  1000,    1500,    2250,   3375,    5063,\n  7594,    11391,   17086,  25629,   38443,\n  57665,   86498,   129746, 194620,  291929,\n  437894,  656841,  985261, 1477892, 2216838,\n  3325257, 4987885, 7481828\n]);\n\nfunction FibonacciCollector() {\n  this.clear();\n}\n\n// Latency counters based on the internal ranges\nFibonacciCollector.prototype.counters = function () /*: Array<number> */ {\n  return this.counter;\n};\n\n// Store latency and return the number of occurrencies inside the range\n// defined\nFibonacciCollector.prototype.track = function (latency /*: number */) /*: number */ {\n  return ++(this.counter[findIndex(latency)]);\n};\n\n// Recycle the collector (reset using 0 for all the counters)\nFibonacciCollector.prototype.clear = function () /*: FibonacciCollector */ {\n  this.counter = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ];\n\n  return this;\n};\n\n// Hook JSON.stringify to expose the state of the counters\nFibonacciCollector.prototype.toJSON = function () {\n  return this.counter;\n};\n\nmodule.exports = function FibonacciCollectorFactory() {\n  return new FibonacciCollector();\n}\n"]}