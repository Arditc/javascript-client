{"version":3,"sources":["../es6/index.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA,IAAM,WAAW,QAAQ,2CAAR,CAAX;AACN,IAAM,mBAAmB,QAAQ,4CAAR,CAAnB;;AAEN,IAAM,iBAAiB,QAAQ,6CAAR,CAAjB;AACN,IAAM,wBAAwB,QAAQ,kDAAR,CAAxB;AACN,IAAM,aAAa,QAAQ,iDAAR,CAAb;;AAEN,IAAM,qBAAqB,QAAQ,iDAAR,CAArB;AACN,IAAM,4BAA4B,QAAQ,sDAAR,CAA5B;AACN,IAAM,iBAAiB,QAAQ,qDAAR,CAAjB;;AAEN,IAAM,qBAAqB,QAAQ,uBAAR,CAArB;AACN,IAAM,eAAe,QAAQ,iBAAR,CAAf;;AAEN,IAAM,sBAAsB,QAAQ,wBAAR,CAAtB;AACN,IAAM,qBAAqB,QAAQ,uBAAR,CAArB;;AAEN,IAAM,uBAAuB,qBAAvB;AACN,IAAM,wBAAwB,oBAAxB;;AAEN,IAAM,uBAAuB,kBAAvB;AACN,IAAM,uBAAuB,kBAAvB;;AAEN,SAAS,aAAT,GAAyB;AACvB,MAAI,CAAC,sBAAsB,OAAtB,EAAD,EAAkC;AACpC,mBAAe,sBAAsB;AACnC,YAAM,yBAAe,WAAW,yBAAX,CAAqC,qBAArC,CAAf,CAAN;KADa,CAAf,EAEI,IAFJ,CAES,gBAAQ;AACf,4BAAsB,KAAtB;AADe,aAER,IAAP,CAFe;KAAR,CAFT,CAKG,KALH,CAKS,iBAAS;AAChB,4BAAsB,KAAtB;AADgB,KAAT,CALT,CADoC;GAAtC;CADF;;AAaA,SAAS,oBAAT,GAAgC;AAC9B,MAAI,CAAC,qBAAqB,OAArB,EAAD,EAAiC;AACnC,uBAAmB,0BAA0B;AAC3C,YAAM,yBAAe,eAAe,wBAAf,CAAwC,oBAAxC,CAAf,CAAN;KADiB,CAAnB,EAEI,IAFJ,CAES,gBAAQ;AACf,kBAAY,KAAZ,GADe;AAEf,aAAO,IAAP,CAFe;KAAR,CAFT,CAKG,KALH,CAKS,iBAAS;AAChB,kBAAY,KAAZ,GADgB;KAAT,CALT,CADmC;GAArC;CADF;;AAaA,qBAAqB,OAArB,CAA6B,aAA7B,EAA4C,SAAS,GAAT,CAAa,oBAAb,CAA5C;AACA,qBAAqB,OAArB,CAA6B,oBAA7B,EAAmD,SAAS,GAAT,CAAa,wBAAb,CAAnD;;AAEA,QAAQ,OAAR,GAAkB;AAChB,eAAa,mBAAmB,oBAAnB,CAAb;AACA,gBAAc,aAAa,qBAAb,CAAd;CAFF","file":"index.js","sourcesContent":["'use strict';\n\nconst settings = require('@splitsoftware/splitio-utils/lib/settings');\nconst SchedulerFactory = require('@splitsoftware/splitio-utils/lib/scheduler');\n\nconst metricsService = require('@splitsoftware/splitio-services/lib/metrics');\nconst metricsServiceRequest = require('@splitsoftware/splitio-services/lib/metrics/post');\nconst metricsDTO = require('@splitsoftware/splitio-services/lib/metrics/dto');\n\nconst impressionsService = require('@splitsoftware/splitio-services/lib/impressions');\nconst impressionsServiceRequest = require('@splitsoftware/splitio-services/lib/impressions/post');\nconst impressionsDTO = require('@splitsoftware/splitio-services/lib/impressions/dto');\n\nconst PassThroughFactory = require('./tracker/PassThrough');\nconst TimerFactory = require('./tracker/Timer');\n\nconst SequentialCollector = require('./collector/Sequential');\nconst FibonacciCollector = require('./collector/Fibonacci');\n\nconst impressionsCollector = SequentialCollector();\nconst getTreatmentCollector = FibonacciCollector();\n\nconst performanceScheduler = SchedulerFactory();\nconst impressionsScheduler = SchedulerFactory();\n\nfunction publishToTime() {\n  if (!getTreatmentCollector.isEmpty()) {\n    metricsService(metricsServiceRequest({\n      body: JSON.stringify(metricsDTO.fromGetTreatmentCollector(getTreatmentCollector))\n    })).then(resp => {\n      getTreatmentCollector.clear(); // once saved, cleanup the collector\n      return resp;\n    }).catch(error => {\n      getTreatmentCollector.clear(); // after try to save, cleanup the collector\n    });\n  }\n}\n\nfunction publishToImpressions() {\n  if (!impressionsCollector.isEmpty()) {\n    impressionsService(impressionsServiceRequest({\n      body: JSON.stringify(impressionsDTO.fromImpressionsCollector(impressionsCollector))\n    })).then(resp => {\n      impressions.clear();\n      return resp;\n    }).catch(error => {\n      impressions.clear();\n    });\n  }\n}\n\nperformanceScheduler.forever(publishToTime, settings.get('metricsRefreshRate'));\nimpressionsScheduler.forever(publishToImpressions, settings.get('impressionsRefreshRate'));\n\nmodules.exports = {\n  impressions: PassThroughFactory(impressionsCollector),\n  getTreatment: TimerFactory(getTreatmentCollector)\n};\n"]}