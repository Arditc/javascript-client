{"version":3,"sources":["../../es6/settings/index.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAeA,SAAS,QAAT,CAAkB,sBAAlB,iBAA0D;AACxD,MAAI,OAAO;AACT,UAAM;AACJ,wBAAkB,SAAlB;AACA,WAAK,SAAL;AAFI,KAAN;AAIA,eAAW;AACT,2BAAqB,KAArB;AACA,2BAAqB,KAArB;AACA,0BAAoB,MAApB;AAHS,KAAX;GALE,CADoD;;AAaxD,MAAI,QAAQ,sBAAc,EAAd,EAAkB,IAAlB,EAAwB,MAAxB,CAAR;;;;AAboD,MAiBpD,OAAO,MAAM,IAAN,CAAW,gBAAX,KAAgC,QAAvC,EAAiD;AACnD,UAAM,MAAM,6DAAN,CAAN,CADmD;GAArD;;;;AAjBwD,MAuBpD,OAAO,MAAM,SAAN,CAAgB,mBAAhB,KAAwC,QAA/C,EAAyD;AAC3D,UAAM,SAAN,CAAgB,mBAAhB,GAAsC,KAAK,SAAL,CAAe,mBAAf,CADqB;GAA7D;;AAIA,MAAI,OAAO,MAAM,SAAN,CAAgB,mBAAhB,KAAwC,QAA/C,EAAyD;AAC3D,UAAM,SAAN,CAAgB,mBAAhB,GAAsC,KAAK,SAAL,CAAe,mBAAf,CADqB;GAA7D;;AAIA,MAAI,OAAO,MAAM,SAAN,CAAgB,kBAAhB,KAAuC,QAA9C,EAAwD;AAC1D,UAAM,SAAN,CAAgB,kBAAhB,GAAqC,KAAK,SAAL,CAAe,kBAAf,CADqB;GAA5D;;;;AA/BwD,SAqCjD,KAAP,CArCwD;CAA1D;;AAwCA,IAAI,WAAW,IAAX;;AAEJ,OAAO,OAAP,GAAiB;AACf,gCAAU,QAAQ;AAChB,eAAW,SAAS,MAAT,CAAX,CADgB;GADH;AAKf,oBAAI,aAAa;AACf,YAAQ,WAAR;AACE,WAAK,MAAL;AACE,eAAO,SAAS,IAAT,CADT;AADF,WAGO,WAAL;AACE,eAAO,SAAS,SAAT,CADT;AAHF,WAKO,kBAAL;AACE,eAAO,SAAS,IAAT,CAAc,gBAAd,CADT;AALF,WAOO,KAAL;AACE,eAAO,SAAS,IAAT,CAAc,GAAd,CADT;AAPF,WASO,qBAAL;AACE,eAAO,SAAS,SAAT,CAAmB,mBAAnB,CADT;AATF,WAWO,qBAAL;AACE,eAAO,SAAS,SAAT,CAAmB,mBAAnB,CADT;AAXF,WAaO,oBAAL;AACE,eAAO,SAAS,SAAT,CAAmB,kBAAnB,CADT;AAbF,KADe;GALF;CAAjB","file":"index.js","sourcesContent":["'use strict';\n\n/*::\n  type Settings = {\n    core: {\n      authorizationKey: string,\n      key: ?string\n    },\n    scheduler: {\n      featuresRefreshRate: number,\n      segmentsRefreshRate: number,\n      metricsRefreshRate: number\n    }\n  }\n*/\nfunction defaults(custom /*: Settings */) /*: Settings */ {\n  let init = {\n    core: {\n      authorizationKey: undefined,   // API token (tight to an environment)\n      key: undefined                 // user key in your system (only required for browser version).\n    },\n    scheduler: {\n      featuresRefreshRate: 30000, // miliseconds\n      segmentsRefreshRate: 40000, // miliseconds\n      metricsRefreshRate: 300000  // miliseconds (randomly choosen based on this initial rate).\n    }\n  };\n\n  let final = Object.assign({}, init, custom);\n\n  // we can't start the engine without the authorization token.\n\n  if (typeof final.core.authorizationKey !== 'string') {\n    throw Error('Please provide an authorization token to startup the engine');\n  }\n\n  // override invalid values with default ones\n\n  if (typeof final.scheduler.featuresRefreshRate !== 'number') {\n    final.scheduler.featuresRefreshRate = init.scheduler.featuresRefreshRate;\n  }\n\n  if (typeof final.scheduler.segmentsRefreshRate !== 'number') {\n    final.scheduler.segmentsRefreshRate = init.scheduler.segmentsRefreshRate;\n  }\n\n  if (typeof final.scheduler.metricsRefreshRate !== 'number') {\n    final.scheduler.metricsRefreshRate = init.scheduler.metricsRefreshRate;\n  }\n\n  // return an object with all the magic on it\n\n  return final;\n}\n\nlet settings = null;\n\nmodule.exports = {\n  configure(params) {\n    settings = defaults(params);\n  },\n\n  get(settingName) {\n    switch (settingName) {\n      case 'core':\n        return settings.core;\n      case 'scheduler':\n        return settings.scheduler;\n      case 'authorizationKey':\n        return settings.core.authorizationKey;\n      case 'key':\n        return settings.core.key;\n      case 'featuresRefreshRate':\n        return settings.scheduler.featuresRefreshRate;\n      case 'segmentsRefreshRate':\n        return settings.scheduler.segmentsRefreshRate;\n      case 'metricsRefreshRate':\n        return settings.scheduler.metricsRefreshRate;\n    }\n  }\n};\n"]}