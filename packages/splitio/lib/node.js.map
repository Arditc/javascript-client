{"version":3,"sources":["../es6/node.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAI,eAAe,QAAQ,YAAR,CAAf;AACJ,IAAI,OAAO,QAAQ,QAAR,CAAP;;AAEJ,IAAI,UAAU,QAAQ,gCAAR,EAA0C,GAA1C,CAA8C,OAA9C,EAAV;AACJ,IAAI,MAAM,QAAQ,OAAR,EAAiB,SAAjB,CAAN;;AAEJ,SAAS,OAAT,CAAiB,sBAAjB,eAAuD;AACrD,MAAI,kBAAJ,CADqD;AAErD,MAAI,8BAAJ;;;AAFqD,cAKrD,CAAa,SAAb,CAAuB,QAAvB;;;;AALqD,oBASrD,GAAqB,KAAK,KAAL,GAAa,IAAb,CAAkB,UAAU,iBAAV,EAA6B;AAClE,aAAS,iBAAT,CADkE;GAA7B,CAAlB,CAElB,KAFkB,CAEZ,SAAS,IAAT,GAAgB,oBAAhB,CAFT,CATqD;;AAarD,SAAO;AACL,wCAAa,mBAAmB,wCAAyC;AACvE,UAAI,YAAY,SAAZ,CADmE;;AAGvE,UAAI,WAAW,SAAX,EAAsB;AACxB,eAAO,SAAP,CADwB;OAA1B;;AAIA,UAAI,QAAQ,OAAO,MAAP,CAAc,GAAd,CAAkB,WAAlB,CAAR,CAPmE;AAQvE,UAAI,OAAO,SAAP,CARmE;AASvE,UAAI,KAAJ,EAAW;AACT,oBAAY,MAAM,YAAN,CAAmB,GAAnB,CAAZ,CADS;;AAGT,yBAAe,wBAAmB,yBAAoB,SAAtD,EAHS;OAAX,MAIO;AACL,yBAAe,+BAAf,EADK;OAJP;AAOA,aAhBuE;;AAkBvE,aAAO,SAAP,CAlBuE;KADpE;AAqBL,0CAAuB;AACrB,aAAO,kBAAP,CADqB;KArBlB;GAAP,CAbqD;CAAvD;;AAwCA,OAAO,OAAP,GAAiB,OAAjB","file":"node.js","sourcesContent":["/* @flow */ 'use strict';\n\nlet coreSettings = require('./settings');\nlet core = require('./core');\n\nlet tracker = require('@splitsoftware/splitio-metrics').sdk.tracker();\nlet log = require('debug')('splitio');\n\nfunction splitio(settings /*: object */) /*: object */ {\n  let engine;\n  let engineReadyPromise;\n\n  // setup settings for all the modules\n  coreSettings.configure(settings);\n\n  // the engine startup is async (till we get localStorage as\n  // secondary cache)\n  engineReadyPromise = core.start().then(function (initializedEngine) {\n    engine = initializedEngine;\n  }).catch(function noop() { /* only for now */});\n\n  return {\n    getTreatment(key /*: string */, featureName /*: string */) /*: string */ {\n      let treatment = 'control';\n\n      if (engine === undefined) {\n        return treatment;\n      }\n\n      let split = engine.splits.get(featureName);\n      let stop = tracker();\n      if (split) {\n        treatment = split.getTreatment(key);\n\n        log(`feature ${featureName} key ${key} evaluated as ${treatment}`);\n      } else {\n        log(`feature ${featureName} doesn't exist`);\n      }\n      stop();\n\n      return treatment;\n    },\n    ready() /*: Promise */ {\n      return engineReadyPromise;\n    }\n  };\n}\n\nmodule.exports = splitio;\n"]}