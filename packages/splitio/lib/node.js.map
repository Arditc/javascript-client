{"version":3,"sources":["../es6/node.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAM,MAAM,QAAQ,OAAR,EAAiB,SAAjB,CAAN;;AAEN,IAAM,eAAe,QAAQ,2CAAR,CAAf;;AAEN,IAAM,UAAU,QAAQ,gCAAR,CAAV;AACN,IAAM,qBAAqB,QAAQ,WAAR;AAC3B,IAAM,sBAAsB,QAAQ,YAAR;;AAE5B,IAAM,OAAO,QAAQ,QAAR,CAAP;;AAEN,SAAS,OAAT,CAAiB,sBAAjB,eAAuD;AACrD,MAAI,kBAAJ,CADqD;AAErD,MAAI,8BAAJ;;;AAFqD,cAKrD,CAAa,SAAb,CAAuB,QAAvB;;;;AALqD,oBASrD,GAAqB,KAAK,KAAL,GAAa,IAAb,CAAkB,UAAU,iBAAV,EAA6B;AAClE,aAAS,iBAAT,CADkE;GAA7B,CAAlB,CAElB,KAFkB,CAEZ,SAAS,IAAT,GAAgB,oBAAhB,CAFT,CATqD;;AAarD,SAAO;AACL,wCAAa,mBAAmB,wCAAyC;AACvE,UAAI,YAAY,SAAZ,CADmE;;AAGvE,UAAI,WAAW,SAAX,EAAsB;AACxB,2BAAmB,KAAnB,CAAyB;AACvB,mBAAS,WAAT;AACA,kBAFuB;AAGvB,8BAHuB;AAIvB,gBAAM,KAAK,GAAL,EAAN;SAJF,EADwB;;AAQxB,eAAO,SAAP,CARwB;OAA1B;;AAWA,UAAI,OAAO,oBAAoB,KAApB,EAAP;;AAdmE,UAgBnE,QAAQ,OAAO,MAAP,CAAc,GAAd,CAAkB,WAAlB,CAAR,CAhBmE;AAiBvE,UAAI,KAAJ,EAAW;AACT,oBAAY,MAAM,YAAN,CAAmB,GAAnB,CAAZ,CADS;;AAGT,yBAAe,wBAAmB,yBAAoB,SAAtD,EAHS;OAAX,MAIO;AACL,yBAAe,+BAAf,EADK;OAJP;;AAQA;;AAzBuE,wBA2BvE,CAAmB,KAAnB,CAAyB;AACvB,iBAAS,WAAT;AACA,gBAFuB;AAGvB,4BAHuB;AAIvB,cAAM,KAAK,GAAL,EAAN;OAJF,EA3BuE;;AAkCvE,aAAO,SAAP,CAlCuE;KADpE;AAsCL,0CAAuB;AACrB,aAAO,kBAAP,CADqB;KAtClB;GAAP,CAbqD;CAAvD;;AAyDA,OAAO,OAAP,GAAiB,OAAjB","file":"node.js","sourcesContent":["/* @flow */ 'use strict';\n\nconst log = require('debug')('splitio');\n\nconst coreSettings = require('@splitsoftware/splitio-utils/lib/settings');\n\nconst metrics = require('@splitsoftware/splitio-metrics');\nconst impressionsTracker = metrics.impressions;\nconst getTreatmentTracker = metrics.getTreatment;\n\nconst core = require('./core');\n\nfunction splitio(settings /*: object */) /*: object */ {\n  let engine;\n  let engineReadyPromise;\n\n  // setup settings for all the modules\n  coreSettings.configure(settings);\n\n  // the engine startup is async (till we get localStorage as\n  // secondary cache)\n  engineReadyPromise = core.start().then(function (initializedEngine) {\n    engine = initializedEngine;\n  }).catch(function noop() { /* only for now */});\n\n  return {\n    getTreatment(key /*: string */, featureName /*: string */) /*: string */ {\n      let treatment = 'control';\n\n      if (engine === undefined) {\n        impressionsTracker.track({\n          feature: featureName,\n          key,\n          treatment,\n          when: Date.now()\n        });\n\n        return treatment;\n      }\n\n      let stop = getTreatmentTracker.track(); // start engine perf monitoring\n\n      let split = engine.splits.get(featureName);\n      if (split) {\n        treatment = split.getTreatment(key);\n\n        log(`feature ${featureName} key ${key} evaluated as ${treatment}`);\n      } else {\n        log(`feature ${featureName} doesn't exist`);\n      }\n\n      stop(); // finish engine perf monitoring\n\n      impressionsTracker.track({\n        feature: featureName,\n        key,\n        treatment,\n        when: Date.now()\n      });\n\n      return treatment;\n    },\n\n    ready() /*: Promise */ {\n      return engineReadyPromise;\n    }\n  };\n}\n\nmodule.exports = splitio;\n"]}