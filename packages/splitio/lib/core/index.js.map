{"version":3,"sources":["../../es6/core/index.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAI,cAAc,QAAQ,8BAAR,CAAd;AACJ,IAAI,mBAAmB,QAAQ,cAAR,CAAnB;;AAEJ,SAAS,QAAT,CAAkB,MAAlB,EAA0B;AACxB,MAAI,MAAM,OAAO,MAAP,CAAc;AACtB,WAAO;AACL,wBAAkB,SAAlB;AACA,WAAK,SAAL;KAFF;AAIA,eAAW;AACT,2BAAqB,KAArB;AACA,2BAAqB,QAAQ,CAAR;KAFvB;GALQ,EASP,MATO,CAAN,CADoB;;AAYxB,MAAI,OAAO,IAAI,KAAJ,CAAU,gBAAV,KAA+B,QAAtC,EAAgD;AAClD,UAAM,MAAM,6DAAN,CAAN,CADkD;GAApD;;AAIA,MAAI,OAAO,IAAI,SAAJ,CAAc,mBAAd,KAAsC,QAA7C,EAAuD;AACzD,UAAM,UAAU,uDAAV,CAAN,CADyD;GAA3D;;AAIA,MAAI,OAAO,IAAI,SAAJ,CAAc,mBAAd,KAAsC,QAA7C,EAAuD;AACzD,UAAM,UAAU,uDAAV,CAAN,CADyD;GAA3D;;AAIA,SAAO,GAAP,CAxBwB;CAA1B;;AA2BA,IAAI,aAAa,KAAb;AACJ,IAAI,kCAAJ;AACA,IAAI,qCAAJ;;AAEA,IAAI,OAAO;AACT,wBAAM,SAAS;AACb,QAAI,CAAC,UAAD,EAAa;AACf,mBAAa,IAAb,CADe;KAAjB,MAEO;AACL,aAAO,QAAQ,MAAR,CAAe,wBAAf,CAAP,CADK;KAFP;;AAMA,QAAI;AACF,gBAAU,SAAS,OAAT,CAAV,CADE;KAAJ,CAEE,OAAO,KAAP,EAAc;AACd,aAAO,QAAQ,MAAR,CAAe,KAAf,CAAP,CADc;KAAd;;mBAUE,QAnBS;QAcX,uBAdW;sCAeX,UAfW;QAgBT,6DAhBS;QAiBT,6DAjBS;;AAqBb,6BAAyB,kBAAzB,CArBa;AAsBb,gCAA4B,kBAA5B,CAtBa;;AAwBb,WAAO,uBAAuB,OAAvB,CACL,YAAY,mBAAZ,EACA,mBAFK,EAGL,KAHK,EAIL,IAJK,CAIA,YAAM;AACX,aAAO,0BAA0B,OAA1B,CACL,YAAY,eAAZ,EACA,mBAFK,EAGL,KAHK,CAAP,CADW;KAAN,CAJP,CAxBa;GADN;AAsCT,gCAAW;AACT,WAAO,UAAP,CADS;GAtCF;CAAP;;AA2CJ,OAAO,OAAP,GAAiB,IAAjB","file":"index.js","sourcesContent":["/* @flow */ 'use strict';\n\nlet cacheFacade = require('@splitsoftware/splitio-cache');\nlet schedulerFactory = require('../scheduler');\n\nfunction defaults(params) {\n  let def = Object.assign({\n    cache: {\n      authorizationKey: undefined,\n      key: undefined\n    },\n    scheduler: {\n      featuresRefreshRate: 60000,\n      segmentsRefreshRate: 60000 * 3\n    }\n  }, params);\n\n  if (typeof def.cache.authorizationKey !== 'string') {\n    throw Error('Please provide an authorization token to startup the engine');\n  }\n\n  if (typeof def.scheduler.featuresRefreshRate !== 'number') {\n    throw TypeError('featuresRefreshRate should be a number of miliseconds');\n  }\n\n  if (typeof def.scheduler.segmentsRefreshRate !== 'number') {\n    throw TypeError('segmentsRefreshRate should be a number of miliseconds');\n  }\n\n  return def;\n}\n\nlet _isStarted = false;\nlet _splitRefreshScheduler;\nlet _segmentsRefreshScheduler;\n\nlet core = {\n  start(options) {\n    if (!_isStarted) {\n      _isStarted = true;\n    } else {\n      return Promise.reject('Engine already started');\n    }\n\n    try {\n      options = defaults(options);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let {\n      cache,\n      scheduler: {\n        featuresRefreshRate,\n        segmentsRefreshRate\n      }\n    } = options;\n\n    _splitRefreshScheduler = schedulerFactory();\n    _segmentsRefreshScheduler = schedulerFactory();\n\n    return _splitRefreshScheduler.forever(\n      cacheFacade.splitChangesUpdater,\n      featuresRefreshRate,\n      cache\n    ).then(() => {\n      return _segmentsRefreshScheduler.forever(\n        cacheFacade.segmentsUpdater,\n        segmentsRefreshRate,\n        cache\n      );\n    });\n  },\n\n  isStared() {\n    return _isStarted;\n  }\n};\n\nmodule.exports = core;\n"]}