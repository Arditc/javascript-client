{"version":3,"sources":["../../es6/core/index.js"],"names":[],"mappings":"WAAY;;;;;;;;AAEZ,IAAI,gBAAgB,QAAQ,aAAR,CAAhB;AACJ,IAAI,mBAAmB,QAAQ,cAAR,CAAnB;;eAKA,QAAQ,8BAAR;;IAFF;IACA;;AAGF,IAAI,UAAU,QAAQ,gCAAR,CAAV;;AAEJ,IAAI,aAAa,KAAb;AACJ,IAAI,OAAO;AACT,0BAAQ;AACN,QAAI,CAAC,UAAD,EAAa;AACf,mBAAa,IAAb,CADe;KAAjB,MAEO;AACL,aAAO,kBAAQ,MAAR,CAAe,wBAAf,CAAP,CADK;KAFP;;AAMA,QAAI,eAAe,cAAc,GAAd,CAAkB,MAAlB,CAAf,CAPE;AAQN,QAAI,sBAAsB,cAAc,GAAd,CAAkB,qBAAlB,CAAtB,CARE;AASN,QAAI,sBAAsB,cAAc,GAAd,CAAkB,qBAAlB,CAAtB,CATE;AAUN,QAAI,qBAAqB,cAAc,GAAd,CAAkB,oBAAlB,CAArB,CAVE;;AAYN,QAAI,wBAAwB,kBAAxB,CAZE;AAaN,QAAI,2BAA2B,kBAA3B,CAbE;AAcN,QAAI,uBAAuB,kBAAvB;;;AAdE,wBAiBN,CAAqB,OAArB,CAA6B,QAAQ,OAAR,EAAiB,kBAA9C;;;;;AAjBM,WAsBC,sBAAsB,OAAtB,CAA8B,mBAA9B,EAAmD,mBAAnD,EAAwE,YAAxE,EAAsF,IAAtF,CAA2F,YAAM;AACtG,aAAO,yBAAyB,OAAzB,CAAiC,eAAjC,EAAkD,mBAAlD,EAAuE,YAAvE,CAAP,CADsG;KAAN,CAAlG,CAtBM;GADC;AA4BT,gCAAW;AACT,WAAO,UAAP,CADS;GA5BF;CAAP;;AAiCJ,OAAO,OAAP,GAAiB,IAAjB","file":"index.js","sourcesContent":["/* @flow */ 'use strict';\n\nlet splitSettings = require('../settings');\nlet schedulerFactory = require('../scheduler');\n\nlet {\n  splitChangesUpdater,\n  segmentsUpdater\n} = require('@splitsoftware/splitio-cache');\n\nlet metrics = require('@splitsoftware/splitio-metrics');\n\nlet _isStarted = false;\nlet core = {\n  start() {\n    if (!_isStarted) {\n      _isStarted = true;\n    } else {\n      return Promise.reject('Engine already started');\n    }\n\n    let coreSettings = splitSettings.get('core');\n    let featuresRefreshRate = splitSettings.get('featuresRefreshRate');\n    let segmentsRefreshRate = splitSettings.get('segmentsRefreshRate');\n    let metricsRefreshRate = splitSettings.get('metricsRefreshRate');\n\n    let splitRefreshScheduler = schedulerFactory();\n    let segmentsRefreshScheduler = schedulerFactory();\n    let metricsPushScheduler = schedulerFactory();\n\n    // send stats to split servers if needed.\n    metricsPushScheduler.forever(metrics.publish, metricsRefreshRate);\n\n    // the first time the download is sequential:\n    // 1- download feature settings\n    // 2- segments\n    return splitRefreshScheduler.forever(splitChangesUpdater, featuresRefreshRate, coreSettings).then(() => {\n      return segmentsRefreshScheduler.forever(segmentsUpdater, segmentsRefreshRate, coreSettings);\n    });\n  },\n\n  isStared() {\n    return _isStarted;\n  }\n};\n\nmodule.exports = core;\n"]}