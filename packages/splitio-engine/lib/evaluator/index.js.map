{"version":3,"sources":["../../es6/evaluator/index.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAM,YAAY,QAAQ,wBAAR,CAAZ;AACN,IAAI,SAAS,QAAQ,WAAR,CAAT;;;;;AAKJ,SAAS,gBAAT,CAA0B,gCAA1B,EAA4D,4BAA5D,iBAA0G;;AAExG,SAAO,SAAS,SAAT,CAAmB,iBAAnB,EAAsC,kBAAtC,gBAAyE;;;AAG9E,QAAI,iBAAiB,GAAjB,CAAJ,EAA2B;AACzB,aAAO,OAAO,YAAP,CAAoB,GAApB,EAAyB,IAAzB,EAA+B,UAA/B,CAAP,CADyB;KAA3B;;;AAH8E,WAQvE,SAAP,CAR8E;GAAzE,CAFiG;CAA1G;;AAgBA,OAAO,OAAP,GAAiB,gBAAjB","file":"index.js","sourcesContent":["/* @flow */ 'use strict';\n\nconst TREATMENT = require('../treatments/reserved');\nlet engine = require('../engine');\n\n/**\n * Evaluator factory.\n */\nfunction evaluatorContext(matcherEvaluator /*: function */, treatments /*: Treatments */) /*: Function */ {\n\n  return function evaluator(key /*: string */, seed /*: number */) /*:? string */ {\n\n    // if the matcherEvaluator return true, then evaluate the treatment\n    if (matcherEvaluator(key)) {\n      return engine.getTreatment(key, seed, treatments);\n    }\n\n    // else we should notify the engine to continue evaluating\n    return undefined;\n\n  };\n\n}\n\nmodule.exports = evaluatorContext;\n"]}