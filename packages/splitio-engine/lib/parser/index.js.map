{"version":3,"sources":["../../es6/parser/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAM,oBAAoB,QAAQ,wBAAR,CAApB;AACN,IAAM,mBAAmB,QAAQ,eAAR,EAAyB,KAAzB;;AAEzB,IAAM,eAAe,QAAQ,mBAAR,EAA6B,IAA7B;AACrB,IAAM,iBAAiB,QAAQ,aAAR,CAAjB;;AAEN,IAAM,QAAQ,QAAQ,UAAR,CAAR;;AAEN,IAAM,mBAAmB,QAAQ,cAAR,CAAnB;;AAEN,IAAM,mBAAmB,QAAQ,uBAAR,CAAnB;AACN,IAAM,cAAc,QAAQ,kBAAR,CAAd;;;;;;;;;;;;AAYN,SAAS,KAAT,CAAe,kCAAf,EAAmD,sBAAnD,wBAAkG;AAChG,MAAI,aAAa,EAAb,CAD4F;AAEhG,MAAI,WAAW,mBAAX,CAF4F;AAGhG,MAAI,YAAY,IAAZ,CAH4F;;;;;;;AAKhG,oDAAsB,kBAAtB,oGAAkC;UAAzB,wBAAyB;UAG5B,WAGA,UAJF,aACE,SAH4B;UAK9B,aACE,UADF;;;AAL8B;AAShC,iBAAW,kBAAkB,QAAlB,CAAX;;;AATgC,UAY5B,cAAc,SAAS,GAAT,CAAa,mBAAW;;AAExC,YAAI,QAAQ,IAAR,KAAiB,aAAa,OAAb,EAAsB;AACzC,mBAAS,GAAT,CAAa,QAAQ,KAAR,CAAb,CADyC;SAA3C;;AAIA,YAAI,KAAK,eAAe,OAAf,EAAwB,OAAxB,CAAL,CANoC;;AAQxC,eAAO,SAAS,IAAT,CAAc,GAAd,EAAmB,UAAnB,EAA+B;AACpC,iBAAO,GAAG,MAAM,GAAN,EAAW,QAAQ,SAAR,EAAmB,UAA9B,CAAH,CAAP,CADoC;SAA/B,CARiC;OAAX,CAA3B;;;;AAZ4B,UA2B5B,YAAY,MAAZ,KAAuB,CAAvB,EAA0B;;AAE5B,qBAAa,EAAb,CAF4B;AAG5B,mBAAW,mBAAX,CAH4B;;AAK5B,cAL4B;OAA9B;;AAQA,iBAAW,IAAX,CAAgB,iBACd,YAAY,WAAZ,CADc,EAEd,iBAAiB,UAAjB,CAFc,CAAhB,EAnCgC;KAAlC;;;;;;;;;;;;;;;;GALgG;;AA+ChG,cAAY,iBAAiB,UAAjB,CAAZ,CA/CgG;;AAiDhG,SAAO;AACL,wBADK;AAEL,sBAFK;GAAP,CAjDgG;CAAlG;;AAuDA,OAAO,OAAP,GAAiB,KAAjB","file":"index.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nconst matchersTransform = require('../transforms/matchers');\nconst treatmentsParser = require('../treatments').parse;\n\nconst matcherTypes = require('../matchers/types').enum;\nconst matcherFactory = require('../matchers');\n\nconst value = require('../value');\n\nconst evaluatorFactory = require('../evaluator');\n\nconst ifElseIfCombiner = require('../combiners/ifelseif');\nconst andCombiner = require('../combiners/and');\n\n/*::\n  type ParserOutputDTO = {\n    segments: Set,\n    evaluator: (key: string, seed: number) => boolean\n  }\n*/\n\n// Collect segments and create the evaluator function given a list of\n// conditions. This code is the base used by the class `Split` for\n// instanciation.\nfunction parse(conditions /*: Iterable<Object> */, storage /*: Storage */) /*: ParserOutputDTO */ {\n  let predicates = [];\n  let segments = new Set();\n  let evaluator = null;\n\n  for (let condition of conditions) {\n    let {\n      matcherGroup: {\n        matchers\n      },\n      partitions\n    } = condition;\n\n    // transform data structure\n    matchers = matchersTransform(matchers);\n\n    // create a set of pure functions (key, attr, attributes) => boolean\n    let expressions = matchers.map(matcher => {\n      // Incrementally collect segmentNames\n      if (matcher.type === matcherTypes.SEGMENT) {\n        segments.add(matcher.value);\n      }\n\n      let fn = matcherFactory(matcher, storage);\n\n      return function expr(key, attributes) {\n        return fn(value(key, matcher.attribute, attributes));\n      };\n    });\n\n    // if matcher's factory can't instanciate the matchers, the expressions array\n    // will be empty\n    if (expressions.length === 0) {\n      // reset any data collected during parsing\n      predicates = [];\n      segments = new Set();\n\n      break;\n    }\n\n    predicates.push(evaluatorFactory(\n      andCombiner(expressions),\n      treatmentsParser(partitions)\n    ));\n  }\n\n  // Instanciate evaluator given the set of conditions using if else if logic\n  evaluator = ifElseIfCombiner(predicates);\n\n  return {\n    evaluator,\n    segments\n  };\n}\n\nmodule.exports = parse;\n"]}