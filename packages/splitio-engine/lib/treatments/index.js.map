{"version":3,"sources":["../../es6/treatments/index.js"],"names":[],"mappings":"WAAY;;;;;;;;;;;;;;;;;;;AASZ,SAAS,UAAT,CAAoB,2BAApB,EAAiD,+BAAjD,EAAkF;AAChF,MAAI,EAAE,gBAAgB,UAAhB,CAAF,EAA+B;AAChC,WAAO,IAAI,UAAJ,CAAe,QAAf,EAAyB,SAAzB,EAAoC,QAApC,CAAP,CADgC;GAAnC;;AAIA,MAAI,OAAO,OAAO,MAAP,GAAgB,CAAhB,CAAP,KAA8B,GAA9B,EAAmC,MAAM,IAAI,UAAJ,CAAe,mCAAf,CAAN,CAAvC;;AAEA,OAAK,OAAL,GAAe,MAAf,CAPgF;AAQhF,OAAK,WAAL,GAAmB,UAAnB,CARgF;CAAlF;;AAWA,WAAW,KAAX,GAAmB,SAAS,KAAT,CAAe,+BAAf,mBAAkE;qBACxD,KAAK,MAAL,CAAY,UAAC,KAAD,EAAQ,KAAR,EAAkB;QAClD,OAAmB,MAAnB,KADkD;QAC5C,YAAa,MAAb,UAD4C;;;AAGvD,UAAM,MAAN,CAAa,IAAb,CAAmB,MAAM,GAAN,IAAa,IAAb,CAAnB,CAHuD;AAIvD,UAAM,UAAN,CAAiB,IAAjB,CAAuB,SAAvB,EAJuD;;AAMvD,WAAO,KAAP,CANuD;GAAlB,EAOpC;AACD,SAAK,CAAL;AACA,YAAQ,EAAR;AACA,gBAAY,EAAZ;GAVyB,EADwD;;MAC9E,6BAD8E;MACtE,qCADsE;;;AAcnF,SAAO,IAAI,UAAJ,CAAe,MAAf,EAAuB,UAAvB,CAAP,CAdmF;CAAlE;;AAiBnB,WAAW,SAAX,CAAqB,eAArB,GAAuC,SAAS,eAAT,CAAyB,eAAzB,eAAwD;AAC7F,MAAI,IAAI,CAAJ,IAAS,IAAI,GAAJ,EAAS,MAAM,IAAI,UAAJ,CAAe,0CAAf,CAAN,CAAtB;;uCAD6F;;;;;AAG7F,oDAAmB,KAAK,OAAL,CAAa,OAAb,UAAnB,oGAA2C;;;UAAjC,mBAAiC;UAA9B,mBAA8B;;AACzC,UAAI,KAAK,CAAL,EAAQ,OAAO,KAAK,WAAL,CAAiB,CAAjB,CAAP,CAAZ;KADF;;;;;;;;;;;;;;GAH6F;CAAxD;;AAQvC,OAAO,OAAP,GAAiB,UAAjB","file":"index.js","sourcesContent":["/* @flow */ 'use strict';\n\n/*::\n  type PartitionDTO = {\n    treatment: string,\n    size: number\n  }\n*/\n\nfunction Treatments(ranges /*: array<number> */, treatments /*: array<string> */) {\n  if (!(this instanceof Treatments)) {\n     return new Treatments(baseInfo, evaluator, segments);\n  }\n\n  if (ranges[ranges.length - 1] !== 100) throw new RangeError('Provided invalid dataset as input');\n\n  this._ranges = ranges;\n  this._treatments = treatments;\n}\n\nTreatments.parse = function parse(data /*: array<PartitionDTO> */) /*: Treatments */ {\n  let {ranges, treatments} = data.reduce((accum, value) => {\n    let {size, treatment} = value;\n\n    accum.ranges.push( accum.inc += size );\n    accum.treatments.push( treatment );\n\n    return accum;\n  }, {\n    inc: 0,\n    ranges: [],\n    treatments: []\n  });\n\n  return new Treatments(ranges, treatments);\n}\n\nTreatments.prototype.getTreatmentFor = function getTreatmentFor(x /*: number */) /*: string */ {\n  if (x < 0 || x > 100) throw new RangeError('Please provide a value between 0 and 100');\n\n  for (let [k, r] of this._ranges.entries()) {\n    if (x <= r) return this._treatments[k];\n  }\n}\n\nmodule.exports = Treatments;\n"]}