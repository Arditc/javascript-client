{"version":3,"sources":["../../es6/transforms/matchers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAgBA,IAAM,eAAe,QAAQ,mBAAR,CAAf;AACN,IAAM,mBAAmB,QAAQ,WAAR,CAAnB;AACN,IAAM,qBAAqB,QAAQ,aAAR,CAArB;AACN,IAAM,YAAY,QAAQ,kBAAR,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAuCF,QAAQ,gBAAR;;6BAJF;IACE;IACA;;;;AAKJ,SAAS,SAAT,CAAmB,6BAAnB,0BAA2E;;AAEzE,MAAI,iBAAiB,SAAS,GAAT,CAAa,mBAAW;QAEzC;;AAOE,YAPF,YAFyC;QAGzC;MAME,QANF,OAHyC;QAIzC;MAKE,QALF,YAJyC;QAKV,gBAI7B,QAJF,8BALyC;QAMnB,kBAGpB,QAHF,qBANyC;QAOhB,qBAEvB,QAFF,wBAPyC;QAQrB,gBAClB,QADF,mBARyC;;;AAW3C,QAAI,YAAY,eAAe,YAAY,SAAZ,CAXY;AAY3C,QAAI,OAAO,aAAa,MAAb,CAAoB,WAApB,CAAP,CAZuC;AAa3C,QAAI,QAAQ,SAAR,CAbuC;;AAe3C,QAAI,SAAS,aAAa,IAAb,CAAkB,OAAlB,EAA2B;AACtC,cAAQ,iBAAiB,aAAjB,CAAR,CADsC;KAAxC,MAEO,IAAI,SAAS,aAAa,IAAb,CAAkB,SAAlB,EAA6B;AAC/C,cAAQ,mBAAmB,eAAnB,CAAR,CAD+C;KAA1C,MAEA,IAAI,SAAS,aAAa,IAAb,CAAkB,QAAlB,EAA4B;AAC9C,cAAQ,kBAAR,CAD8C;;AAG9C,UAAI,mBAAmB,QAAnB,KAAgC,UAAhC,EAA4C;AAC9C,2BAAmB,KAAnB,GAA2B,YAAY,mBAAmB,KAAnB,CAAvC,CAD8C;OAAhD;KAHK,MAMA,IAAI,SAAS,aAAa,IAAb,CAAkB,wBAAlB,IACT,SAAS,aAAa,IAAb,CAAkB,qBAAlB,EAAyC;AAC3D,cAAQ,kBAAR,CAD2D;;AAG3D,UAAI,mBAAmB,QAAnB,KAAgC,UAAhC,EAA4C;AAC9C,2BAAmB,KAAnB,GAA2B,YAAY,mBAAmB,KAAnB,CAAvC,CAD8C;OAAhD;KAJK,MAOA,IAAI,SAAS,aAAa,IAAb,CAAkB,OAAlB,EAA2B;AAC7C,cAAQ,aAAR,CAD6C;;AAG7C,UAAI,cAAc,QAAd,KAA2B,UAA3B,EAAuC;AACzC,sBAAc,KAAd,GAAsB,YAAY,cAAc,KAAd,CAAlC,CADyC;AAEzC,sBAAc,GAAd,GAAoB,YAAY,cAAc,GAAd,CAAhC,CAFyC;OAA3C;KAHK;;AASP,WAAO;AACL,0BADK;AAEL,oBAFK;AAGL,gBAHK;AAIL;AAJK,KAAP,CAzC2C;GAAX,CAA9B,CAFqE;;AAmDzE,MAAI,UAAU,cAAV,EAA0B;WAAK,EAAE,IAAF,KAAW,aAAa,IAAb,CAAkB,SAAlB;GAAhB,CAA1B,KAA2E,CAAC,CAAD,EAAI;AACjF,WAAO,cAAP,CADiF;GAAnF,MAEO;AACL,WAAO,EAAP,CADK;GAFP;CAnDF;;AA0DA,OAAO,OAAP,GAAiB,SAAjB","file":"matchers.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nconst matcherTypes = require('../matchers/types');\nconst segmentTransform = require('./segment');\nconst whitelistTransform = require('./whitelist');\nconst findIndex = require('lodash.findindex');\n\n/*::\n  type dataTypes = null | 'NUMBER' | 'DATETIME';\n\n  type keySelectorObject = {\n    trafficType: string,\n    attribute: ?string\n  };\n\n  type segmentObject = {\n    segmentName: string\n  };\n\n  type whiteListObject = Array<string>;\n\n  type unaryNumericObject = {\n    dataType: dataTypes,\n    value: number\n  };\n\n  type betweenObject = {\n    dataType: dataTypes,\n    start: number,\n    end: number\n  };\n\n  type MatcherDTO = {\n    attribute: ?string,\n    negate: boolean,\n    type: Symbol,\n    value: undefined | string | whiteListObject | unaryNumericObject | betweenObject\n  };\n*/\nconst {\n  date: {\n    zeroSinceHH,\n    zeroSinceSS\n  }\n} = require('../convertions');\n\n// Flat the complex matcherGroup structure into something handy.\nfunction transform(matchers /*: Array<object> */) /*: Array<MatcherDTO> */ {\n\n  let parsedMatchers = matchers.map(matcher => {\n    let {\n      matcherType                                   /*: string */,\n      negate                                        /*: boolean */,\n      keySelector                                   /*: keySelectorObject */,\n      userDefinedSegmentMatcherData: segmentObject  /*: segmentObject */,\n      whitelistMatcherData: whitelistObject         /*: whiteListObject */,\n      unaryNumericMatcherData: unaryNumericObject   /*: unaryNumericObject */,\n      betweenMatcherData: betweenObject             /*: betweenObject */\n    } = matcher;\n\n    let attribute = keySelector && keySelector.attribute;\n    let type = matcherTypes.mapper(matcherType);\n    let value = undefined;\n\n    if (type === matcherTypes.enum.SEGMENT) {\n      value = segmentTransform(segmentObject);\n    } else if (type === matcherTypes.enum.WHITELIST) {\n      value = whitelistTransform(whitelistObject);\n    } else if (type === matcherTypes.enum.EQUAL_TO) {\n      value = unaryNumericObject;\n\n      if (unaryNumericObject.dataType === 'DATETIME') {\n        unaryNumericObject.value = zeroSinceHH(unaryNumericObject.value);\n      }\n    } else if (type === matcherTypes.enum.GREATER_THAN_OR_EQUAL_TO ||\n               type === matcherTypes.enum.LESS_THAN_OR_EQUAL_TO) {\n      value = unaryNumericObject;\n\n      if (unaryNumericObject.dataType === 'DATETIME') {\n        unaryNumericObject.value = zeroSinceSS(unaryNumericObject.value);\n      }\n    } else if (type === matcherTypes.enum.BETWEEN) {\n      value = betweenObject;\n\n      if (betweenObject.dataType === 'DATETIME') {\n        betweenObject.start = zeroSinceSS(betweenObject.start);\n        betweenObject.end = zeroSinceSS(betweenObject.end);\n      }\n    }\n\n    return {\n      attribute, // attribute over we should do the matching, undefined means 'use the key'\n      negate,    // should we negate the result?\n      type,      // which kind of matcher we should evaluate\n      value      // metadata used for the matching\n    };\n  });\n\n  if (findIndex(parsedMatchers, m => m.type === matcherTypes.enum.UNDEFINED) === -1) {\n    return parsedMatchers;\n  } else {\n    return [];\n  }\n}\n\nmodule.exports = transform;\n"]}