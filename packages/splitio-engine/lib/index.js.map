{"version":3,"sources":["../es6/index.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAM,SAAS,QAAQ,UAAR,CAAT;;AAEN,SAAS,KAAT,CAAe,QAAf,EAAyB,SAAzB,EAAoC,QAApC,EAA8C;AAC5C,MAAI,EAAE,gBAAgB,KAAhB,CAAF,EAA0B;AAC3B,WAAO,IAAI,KAAJ,CAAU,QAAV,EAAoB,SAApB,EAA+B,QAA/B,CAAP,CAD2B;GAA9B;;AAIA,OAAK,QAAL,GAAgB,QAAhB,CAL4C;AAM5C,OAAK,SAAL,GAAiB,SAAjB,CAN4C;AAO5C,OAAK,QAAL,GAAgB,QAAhB,CAP4C;CAA9C;;AAUA,MAAM,KAAN,GAAc,SAAS,KAAT,CAAe,kBAAf,EAAmC,OAAnC,EAA4C;MACnD,aAA2B,mBAA3B,WADmD;MACpC,kDAAY,oCADwB;;gBAE5B,OAAO,UAAP,EAAmB,OAAnB,EAF4B;;MAEnD,8BAFmD;MAExC,4BAFwC;;;AAIxD,SAAO,IAAI,KAAJ,CAAU,QAAV,EAAoB,SAApB,EAA+B,QAA/B,CAAP,CAJwD;CAA5C;;AAOd,MAAM,SAAN,CAAgB,MAAhB,GAAyB,SAAS,MAAT,GAAkB;AACzC,SAAO,KAAK,QAAL,CAAc,IAAd,CADkC;CAAlB;;AAIzB,MAAM,SAAN,CAAgB,WAAhB,GAA8B,SAAS,WAAT,GAAuB;AACnD,SAAO,KAAK,QAAL,CAD4C;CAAvB;;AAI9B,MAAM,SAAN,CAAgB,YAAhB,GAA+B,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACxD,MAAI,KAAK,QAAL,CAAc,MAAd,EAAsB;AACxB,WAAO,KAAK,QAAL,CAAc,gBAAd,CADiB;GAA1B;;AAIA,MAAI,YAAY,KAAK,SAAL,CAAe,GAAf,EAAoB,KAAK,QAAL,CAAc,IAAd,CAAhC,CALoD;;AAOxD,SAAO,cAAc,SAAd,GAA0B,SAA1B,GAAsC,KAAK,QAAL,CAAc,gBAAd,CAPW;CAA3B;;AAU/B,MAAM,SAAN,CAAgB,WAAhB,GAA8B,SAAS,WAAT,CAAqB,GAArB,EAA0B,SAA1B,EAAqC;AACjE,SAAO,KAAK,YAAL,CAAkB,GAAlB,MAA2B,SAA3B,CAD0D;CAArC;;AAI9B,MAAM,SAAN,CAAgB,SAAhB,GAA4B,SAAS,SAAT,GAAqB;AAC/C,SAAO,KAAK,QAAL,CAAc,MAAd,KAAyB,UAAzB,CADwC;CAArB;;AAI5B,OAAO,OAAP,GAAiB,KAAjB","file":"index.js","sourcesContent":["const parser = require('./parser');\n\nfunction Split(baseInfo, evaluator, segments) {\n  if (!(this instanceof Split)) {\n     return new Split(baseInfo, evaluator, segments);\n  }\n\n  this.baseInfo = baseInfo;\n  this.evaluator = evaluator;\n  this.segments = segments;\n}\n\nSplit.parse = function parse(splitFlatStructure, storage) {\n  let {conditions, ...baseInfo} = splitFlatStructure;\n  let {evaluator, segments} = parser(conditions, storage);\n\n  return new Split(baseInfo, evaluator, segments);\n}\n\nSplit.prototype.getKey = function getKey() {\n  return this.baseInfo.name;\n};\n\nSplit.prototype.getSegments = function getSegments() {\n  return this.segments;\n}\n\nSplit.prototype.getTreatment = function getTreatment(key) {\n  if (this.baseInfo.killed) {\n    return this.baseInfo.defaultTreatment;\n  }\n\n  let treatment = this.evaluator(key, this.baseInfo.seed);\n\n  return treatment !== undefined ? treatment : this.baseInfo.defaultTreatment;\n}\n\nSplit.prototype.isTreatment = function isTreatment(key, treatment) {\n  return this.getTreatment(key) === treatment;\n}\n\nSplit.prototype.isGarbage = function isGarbage() {\n  return this.baseInfo.status === 'ARCHIVED';\n}\n\nmodule.exports = Split;\n"]}