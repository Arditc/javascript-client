{"version":3,"sources":["../../es6/matchers/types.js"],"names":[],"mappings":"WAAY,YAAY,CAAC;;AAEzB,MAAM,CAAC,OAAO,GAAG;AACf,MAAI,EAAE;AACJ,OAAG,EAAE,MAAM,EAAE;AACb,WAAO,EAAE,MAAM,EAAE;AACjB,aAAS,EAAE,MAAM,EAAE;GACpB;;AAED,QAAM,kBAAC,yBAAW,EAAgB;AAChC,YAAQ,WAAW;AACjB,WAAK,UAAU;AACb,eAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AAAA,AACvB,WAAK,YAAY;AACf,eAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;AAAA,AAC3B,WAAK,WAAW;AACd,eAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;AAAA,AAC7B;AACE,cAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;AAAA,KACpD;GACF;AAED,SAAO,mBAAC,kBAAI,EAAgB,yBAAW,EAAgB,mCAAa,EAAwB;AAC1F,QAAI,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;AAC1B,aAAO,SAAS,CAAC;KAClB,MAAM,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACrC,aAAO,WAAW,CAAC;KACpB,MAAM,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACvC,aAAO,aAAa,CAAC;KACtB,MAAM;AACL,YAAM,IAAI,KAAK,oBAAkB,IAAI,CAAG,CAAC;KAC1C;GACF;CACF,CAAC","file":"types.js","sourcesContent":["/* @flow */ 'use strict';\n\nmodule.exports = {\n  enum: {\n    ALL: Symbol(),\n    SEGMENT: Symbol(),\n    WHITELIST: Symbol()\n  },\n\n  mapper(matcherType /*: string */) {\n    switch (matcherType) {\n      case 'ALL_KEYS':\n        return this.enum.ALL;\n      case 'IN_SEGMENT':\n        return this.enum.SEGMENT;\n      case 'WHITELIST':\n        return this.enum.WHITELIST;\n      default:\n        throw new Error('Invalid matcher type provided');\n    }\n  },\n\n  chooser(type /*: Symbol */, segmentData /*:? string*/, whitelistData /*:? Array<string> */) {\n    if (type === this.enum.ALL) {\n      return undefined;\n    } else if (type === this.enum.SEGMENT) {\n      return segmentData;\n    } else if (type === this.enum.WHITELIST) {\n      return whitelistData;\n    } else {\n      throw new Error(`Invalid type: ${type}`);\n    }\n  }\n};\n"]}