{"version":3,"sources":["../../../es6/matchers/segment/node.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAI,kBAAkB,QAAQ,0CAAR,EAAoD,QAApD;AACtB,IAAI,MAAM,QAAQ,OAAR,EAAiB,wBAAjB,CAAN;;;;;AAKJ,SAAS,qBAAT,CAA+B,yBAA/B,EAA0D;AACxD,SAAO,SAAS,cAAT,CAAwB,iBAAxB,EAA2C;AAChD,QAAI,cAAc,gBAAgB,GAAhB,CAAoB,WAApB,EAAiC,GAAjC,CAAqC,GAArC,CAAd,CAD4C;;AAGhD,wCAAkC,sBAAiB,eAAU,WAA7D,EAHgD;;AAKhD,WAAO,WAAP,CALgD;GAA3C,CADiD;CAA1D;;AAUA,OAAO,OAAP,GAAiB,qBAAjB","file":"node.js","sourcesContent":["/* @flow */ 'use strict';\n\nlet segmentsStorage = require('@splitsoftware/splitio-cache/lib/storage').segments;\nlet log = require('debug')('splitio-engine:matcher');\n\n/**\n * Segment Matcher Factory.\n */\nfunction matcherSegmentContext(segmentName /*: string */) {\n  return function segmentMatcher(key /*: string */) {\n    let isInSegment = segmentsStorage.get(segmentName).has(key);\n\n    log(`[segmentMatcher] evaluated ${segmentName} / ${key} => ${isInSegment}`);\n\n    return isInSegment;\n  };\n}\n\nmodule.exports = matcherSegmentContext;\n"]}