{"version":3,"sources":["../../../es6/matchers/segment/browser.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAI,kBAAkB,QAAQ,0CAAR,EAAoD,QAApD;AACtB,IAAI,MAAM,QAAQ,OAAR,EAAiB,wBAAjB,CAAN;;;;;AAKJ,SAAS,qBAAT,CAA+B,yBAA/B,iBAA0E;AACxE,SAAO,SAAS,cAAT,iBAAyC;AAC9C,QAAI,wBAAwB,gBAAgB,GAAhB,CAAoB,WAApB,CAAxB,CAD0C;;AAG9C,wCAAkC,uBAAkB,qBAApD,EAH8C;;AAK9C,WAAO,qBAAP,CAL8C;GAAzC,CADiE;CAA1E;;AAUA,OAAO,OAAP,GAAiB,qBAAjB","file":"browser.js","sourcesContent":["/* @flow */ 'use strict';\n\nlet segmentsStorage = require('@splitsoftware/splitio-cache/lib/storage').segments;\nlet log = require('debug')('splitio-engine:matcher');\n\n/**\n * Segment Matcher Factory (for the browser).\n */\nfunction matcherSegmentContext(segmentName /*: string */) /*: Function */ {\n  return function segmentMatcher() /*: boolean */ {\n    let isSegmentInMySegments = segmentsStorage.has(segmentName);\n\n    log(`[segmentMatcher] evaluated ${segmentName} as ${isSegmentInMySegments}`);\n\n    return isSegmentInMySegments;\n  };\n}\n\nmodule.exports = matcherSegmentContext;\n"]}