{"version":3,"sources":["../../es6/combiners/ifelseif.spec.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAgBA,IAAM,OAAO,QAAQ,MAAR,CAAP;AACN,IAAM,0BAA0B,QAAQ,iCAAR,CAA1B;;AAEN,KAAK,kGAAL,EAAyG,kBAAU;AACjH,MAAI,WAAW,QAAX,CAD6G;AAEjH,MAAI,YAAY,IAAZ,CAF6G;AAGjH,MAAI,kBAAkB,EAAlB,CAH6G;AAIjH,MAAI,mBAAmB,WAAnB,CAJ6G;;AAMjH,WAAS,SAAT,CAAmB,GAAnB,EAAwB,IAAxB,EAA8B,UAA9B,EAA0C;AACxC,WAAO,IAAP,CAAY,QAAQ,QAAR,EAAkB,sBAA9B,EADwC;AAExC,WAAO,IAAP,CAAY,SAAS,SAAT,EAAoB,uBAAhC,EAFwC;AAGxC,WAAO,IAAP,CAAY,eAAe,eAAf,EAAgC,6BAA5C,EAHwC;;AAKxC,WAAO,gBAAP,CALwC;GAA1C;;AAQA,MAAI,aAAa,CAAC,SAAD,CAAb,CAd6G;AAejH,MAAI,oBAAoB,wBAAwB,UAAxB,CAApB,CAf6G;;AAiBjH,SAAO,IAAP,CACE,kBAAkB,QAAlB,EAA4B,SAA5B,EAAuC,eAAvC,MAA4D,gBAA5D,+BAC2B,gBAF7B,EAjBiH;AAqBjH,SAAO,GAAP,GArBiH;CAAV,CAAzG;;AAwBA,KAAK,kFAAL,EAAyF,kBAAU;AACjG,MAAI,SAAS,CAAT,CAD6F;AAEjG,MAAI,aAAa,CACf,SAAS,KAAT,GAAiB;AACf,aADe;AAEf,WAAO,SAAP,CAFe;GAAjB,EAIA,SAAS,OAAT,GAAmB;AACjB,aADiB;AAEjB,WAAO,SAAP,CAFiB;GAAnB,EAIA,SAAS,UAAT,GAAsB;AACpB,aADoB;AAEpB,WAAO,YAAP,CAFoB;GAAtB,CATE,CAF6F;;AAiBjG,MAAI,oBAAoB,wBAAwB,UAAxB,CAApB,CAjB6F;;AAmBjG,SAAO,IAAP,CAAY,wBAAwB,SAAxB,EAAmC,4EAA/C,EAnBiG;AAoBjG,SAAO,IAAP,CAAY,WAAW,CAAX,EAAc,iDAA1B,EApBiG;AAqBjG,SAAO,GAAP,GArBiG;CAAV,CAAzF;;AAwBA,KAAK,8EAAL,EAAqF,kBAAU;AAC7F,MAAI,aAAa,CACf,SAAS,KAAT,GAAiB;AACf,WAAO,SAAP,CADe;GAAjB,EAGA,SAAS,KAAT,GAAiB;AACf,WAAO,SAAP,CADe;GAAjB,EAGA,SAAS,KAAT,GAAiB;AACf,WAAO,SAAP,CADe;GAAjB,CAPE,CADyF;;AAa7F,SAAO,IAAP,CAAY,wBAAwB,UAAxB,QAA0C,SAA1C,CAAZ,CAb6F;AAc7F,SAAO,GAAP,GAd6F;CAAV,CAArF","file":"ifelseif.spec.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nconst tape = require('tape');\nconst ifElseIfCombinerFactory = require('../../../lib/combiners/ifelseif');\n\ntape('IF ELSE IF COMBINER / should correctly propagate context parameters and predicates returns value', assert => {\n  let inputKey = 'sample';\n  let inputSeed = 1234;\n  let inputAttributes = {};\n  let evaluationResult = 'treatment';\n\n  function evaluator(key, seed, attributes) {\n    assert.true(key === inputKey, 'key should be equals');\n    assert.true(seed === inputSeed, 'seed should be equals');\n    assert.true(attributes === inputAttributes, 'attributes should be equals');\n\n    return evaluationResult;\n  }\n\n  let predicates = [evaluator];\n  let ifElseIfEvaluator = ifElseIfCombinerFactory(predicates);\n\n  assert.true(\n    ifElseIfEvaluator(inputKey, inputSeed, inputAttributes) === evaluationResult,\n    `evaluator should return ${evaluationResult}`\n  );\n  assert.end();\n});\n\ntape('IF ELSE IF COMBINER / should stop evaluating when one matcher return a treatment', assert => {\n  let called = 0;\n  let predicates = [\n    function undef() {\n      called++;\n      return undefined;\n    },\n    function exclude() {\n      called++;\n      return 'exclude';\n    },\n    function alwaysTrue() {\n      called++;\n      return 'alwaysTrue';\n    }\n  ];\n\n  let ifElseIfEvaluator = ifElseIfCombinerFactory(predicates);\n\n  assert.true(ifElseIfEvaluator() === 'exclude', 'The combiner should STOP at the first predicates which returns a treatment');\n  assert.true(called === 2, 'Just 2 predicates should be called in this test');\n  assert.end();\n});\n\ntape('IF ELSE IF COMBINER / should return undefined if there is none matching rule', assert => {\n  let predicates = [\n    function undef() {\n      return undefined;\n    },\n    function undef() {\n      return undefined;\n    },\n    function undef() {\n      return undefined;\n    }\n  ];\n\n  assert.true(ifElseIfCombinerFactory(predicates)() === undefined);\n  assert.end();\n});\n"]}