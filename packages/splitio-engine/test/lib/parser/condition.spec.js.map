{"version":3,"sources":["../../es6/parser/condition.spec.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,YAAY,QAAQ,kCAAR,CAAZ;;AAEN,IAAI,SAAS,QAAQ,+BAAR,CAAT;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;;AAEJ,KAAK,mCAAL,EAA0C,kBAAU;gBAEtB,OAAO,CAAC;AAClC,kBAAc;AACZ,gBAAU,KAAV;AACA,gBAAU,CAAC;AACT,qBAAa,UAAb;AACA,gBAAQ,KAAR;AACA,uCAA+B,IAA/B;AACA,8BAAsB,IAAtB;OAJQ,CAAV;KAFF;AASA,gBAAY,CAAC;AACX,iBAAW,IAAX;AACA,YAAM,GAAN;KAFU,CAAZ;GAViC,CAAP,EAFsB;;MAE7C,8BAF6C;MAElC,4BAFkC;;AAkBlD,SAAO,IAAP,CAAY,UAAU,IAAV,CAAe,UAAU,OAAV,CAAf,CAAZ,EAAgD,uCAAhD,EAlBkD;AAmBlD,SAAO,IAAP,CAAY,SAAS,IAAT,KAAkB,CAAlB,EAAqB,+CAAjC,EAnBkD;AAoBlD,SAAO,GAAP,GApBkD;CAAV,CAA1C;;AAwBA,KAAK,oCAAL,EAA2C,kBAAU;iBAEvB,OAAO,CAAC;AAClC,kBAAc;AACZ,gBAAU,KAAV;AACA,gBAAU,CAAC;AACT,qBAAa,UAAb;AACA,gBAAQ,KAAR;AACA,uCAA+B,IAA/B;AACA,8BAAsB,IAAtB;OAJQ,CAAV;KAFF;AASA,gBAAY,CAAC;AACX,iBAAW,IAAX;AACA,YAAM,CAAN;KAFU,EAGT;AACD,iBAAW,KAAX;AACA,YAAM,GAAN;KALU,CAAZ;GAViC,CAAP,EAFuB;;MAE9C,+BAF8C;MAEnC,6BAFmC;;AAqBnD,SAAO,KAAP,CAAa,UAAU,IAAV,CAAe,UAAU,OAAV,CAAf,CAAb,EAAiD,wCAAjD,EArBmD;AAsBnD,SAAO,IAAP,CAAY,SAAS,IAAT,KAAkB,CAAlB,EAAqB,+CAAjC,EAtBmD;AAuBnD,SAAO,GAAP,GAvBmD;CAAV,CAA3C;;AA2BA,KAAK,sEAAL,EAA6E,kBAAU;iBAEzD,OAAO,CAAC;AAClC,kBAAc;AACZ,gBAAU,KAAV;AACA,gBAAU,CAAC;AACT,qBAAa,WAAb;AACA,gBAAQ,KAAR;AACA,uCAA+B,IAA/B;AACA,8BAAsB;AACpB,qBAAW,CACT,IADS,EAET,IAFS,EAGT,IAHS,EAIT,IAJS,CAAX;SADF;OAJQ,CAAV;KAFF;AAgBA,gBAAY,CAAC;AACX,iBAAW,IAAX;AACA,YAAM,GAAN;KAFU,CAAZ;GAjBiC,CAAP,EAFyD;;MAEhF,+BAFgF;MAErE,6BAFqE;;AAyBrF,SAAO,KAAP,CAAa,UAAU,IAAV,CAAe,UAAU,OAAV,CAAf,CAAb,EAAiD,8BAAjD,EAzBqF;AA0BrF,SAAO,IAAP,CAAY,UAAU,IAAV,CAAe,UAAU,IAAV,CAAf,CAAZ,EAA6C,6BAA7C,EA1BqF;AA2BrF,SAAO,IAAP,CAAY,UAAU,IAAV,CAAe,UAAU,IAAV,CAAf,CAAZ,EAA6C,6BAA7C,EA3BqF;AA4BrF,SAAO,IAAP,CAAY,SAAS,IAAT,KAAkB,CAAlB,EAAqB,+CAAjC,EA5BqF;AA6BrF,SAAO,GAAP,GA7BqF;CAAV,CAA7E","file":"condition.spec.js","sourcesContent":["'use strict';\n\nconst TREATMENT = require('../../../lib/treatments/reserved');\n\nlet parser = require('../../../lib/parser/condition');\nlet tape = require('tape');\n\ntape('if user is in segment all 100%:on', assert => {\n\n  let {evaluator, segments} = parser([{\n    matcherGroup: {\n      combiner: 'AND',\n      matchers: [{\n        matcherType: 'ALL_KEYS',\n        negate: false,\n        userDefinedSegmentMatcherData: null,\n        whitelistMatcherData: null\n      }]\n    },\n    partitions: [{\n      treatment: 'on',\n      size: 100\n    }]\n  }]);\n\n  assert.true(TREATMENT.isOn(evaluator('a key')), 'evaluator should be evaluated to true');\n  assert.true(segments.size === 0, 'there is no segment present in the definition');\n  assert.end();\n\n});\n\ntape('if user is in segment all 100%:off', assert => {\n\n  let {evaluator, segments} = parser([{\n    matcherGroup: {\n      combiner: 'AND',\n      matchers: [{\n        matcherType: 'ALL_KEYS',\n        negate: false,\n        userDefinedSegmentMatcherData: null,\n        whitelistMatcherData: null\n      }]\n    },\n    partitions: [{\n      treatment: 'on',\n      size: 0\n    }, {\n      treatment: 'off',\n      size: 100\n    }]\n  }]);\n\n  assert.false(TREATMENT.isOn(evaluator('a key')), 'evaluator should be evaluated to false');\n  assert.true(segments.size === 0, 'there is no segment present in the definition');\n  assert.end();\n\n});\n\ntape(\"if user is in segment ['u1', ' u2', ' u3', ' u4'] then split 100%:on\", assert => {\n\n  let {evaluator, segments} = parser([{\n    matcherGroup: {\n      combiner: 'AND',\n      matchers: [{\n        matcherType: 'WHITELIST',\n        negate: false,\n        userDefinedSegmentMatcherData: null,\n        whitelistMatcherData: {\n          whitelist: [\n            'u1',\n            'u2',\n            'u3',\n            'u4'\n          ]\n        }\n      }]\n    },\n    partitions: [{\n      treatment: 'on',\n      size: 100\n    }]\n  }]);\n\n  assert.false(TREATMENT.isOn(evaluator('a key')), 'should be evaluated to false');\n  assert.true(TREATMENT.isOn(evaluator('u1')), 'should be evaluated to true');\n  assert.true(TREATMENT.isOn(evaluator('u3')), 'should be evaluated to true');\n  assert.true(segments.size === 0, 'there is no segment present in the definition');\n  assert.end();\n\n});\n"]}