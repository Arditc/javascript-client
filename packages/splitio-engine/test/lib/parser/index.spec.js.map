{"version":3,"sources":["../../es6/parser/index.spec.js"],"names":[],"mappings":"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","file":"index.spec.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nconst parser = require('../../../lib/parser');\nconst tape = require('tape');\n\ntape('PARSER / if user is in segment all 100%:on', assert => {\n\n  let {evaluator, segments} = parser([{\n    matcherGroup: {\n      combiner: 'AND',\n      matchers: [{\n        matcherType: 'ALL_KEYS',\n        negate: false,\n        userDefinedSegmentMatcherData: null,\n        whitelistMatcherData: null\n      }]\n    },\n    partitions: [{\n      treatment: 'on',\n      size: 100\n    }]\n  }]);\n\n  assert.true(evaluator('a key', 31) === 'on', \"evaluation should throw 'on'\");\n  assert.true(segments.size === 0, 'there is no segment present in the definition');\n  assert.end();\n\n});\n\ntape('PARSER / if user is in segment all 100%:off', assert => {\n\n  let {evaluator, segments} = parser([{\n    matcherGroup: {\n      combiner: 'AND',\n      matchers: [{\n        matcherType: 'ALL_KEYS',\n        negate: false,\n        userDefinedSegmentMatcherData: null,\n        whitelistMatcherData: null\n      }]\n    },\n    partitions: [{\n      treatment: 'on',\n      size: 0\n    }, {\n      treatment: 'off',\n      size: 100\n    }]\n  }]);\n\n  assert.true(evaluator('a key', 31) === 'off', \"evaluation should throw 'off'\");\n  assert.true(segments.size === 0, 'there is no segment present in the definition');\n  assert.end();\n\n});\n\ntape(\"PARSER / if user is in segment ['u1', ' u2', ' u3', ' u4'] then split 100%:on\", assert => {\n\n  let {evaluator, segments} = parser([{\n    matcherGroup: {\n      combiner: 'AND',\n      matchers: [{\n        matcherType: 'WHITELIST',\n        negate: false,\n        userDefinedSegmentMatcherData: null,\n        whitelistMatcherData: {\n          whitelist: [\n            'u1',\n            'u2',\n            'u3',\n            'u4'\n          ]\n        }\n      }]\n    },\n    partitions: [{\n      treatment: 'on',\n      size: 100\n    }]\n  }]);\n\n  assert.true(evaluator('a key', 31) === undefined, 'evaluation should throw undefined');\n  assert.true(evaluator('u1', 31) === 'on', \"evaluation should throw 'on'\");\n  assert.true(evaluator('u3', 31) === 'on', \"should be evaluated to 'on'\");\n  assert.true(segments.size === 0, 'there is no segment present in the definition');\n  assert.end();\n\n});\n\ntape('PARSER / given an unexpected structure, always evaluates to undefined', assert => {\n\n  let {evaluator, segments} = parser([{\n    matcherGroup: {\n      combiner: 'AND',\n      matchers: [{\n        keySelector: {\n          trafficType: 'user',\n          attribute: 'attr'\n        },\n        matcherType: 'EQUAL_TO',\n        negate: false,\n        userDefinedSegmentMatcherData: null,\n        whitelistMatcherData: null,\n        unaryNumericMatcherData: {\n          dataType: 'DATETIME',\n          value: 1458240947021\n        },\n        betweenMatcherData: null\n      }]\n    },\n    partitions: [{\n      treatment: 'on',\n      size: 100\n    }]\n  }]);\n\n  assert.equal(evaluator('test@split.io', 31), 'control', 'should evaluates to control');\n  assert.equal(segments.size, 0, 'should return an empty segments set');\n  assert.end();\n});\n"]}