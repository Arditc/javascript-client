{"version":3,"sources":["../../es6/murmur/index.js"],"names":[],"mappings":"AAAA;;;;AAEA,IAAI,SAAS,QAAQ,eAAR,CAAT;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;;AAEJ,IAAI,WAAW,CACb,QAAQ,gCAAR,CADa,EAEb,QAAQ,iCAAR,CAFa,EAGb,QAAQ,kCAAR,CAHa,CAAX;;AAMJ,SAAS,MAAT,CAAgB,GAAhB,EAAqB,IAArB,EAA2B;AACzB,SAAO,OAAO,GAAP,EAAY,IAAZ,IAAoB,GAApB,CADkB;CAA3B;;AAIA,SAAS,KAAT,CAAe,IAAf,EAAqB;AACnB,MAAI,kBAAkB,GAAlB,CADe;AAEnB,MAAI,eAAe,KAAK,MAAL,CAFA;AAGnB,MAAI,mBAAmB,IAAI,GAAJ,EAAnB,CAHe;AAInB,MAAI,0BAA0B,IAAI,GAAJ,EAA1B;;;AAJe;;;;;AAOnB,yBAAc,8BAAd,oGAAoB;UAAX,gBAAW;;AAClB,UAAI,SAAS,OAAO,CAAP,EAAU,SAAV,CAAT,CADc;;AAGlB,uBAAiB,GAAjB,CAAqB,MAArB,EAA6B,CAAC,iBAAiB,GAAjB,CAAqB,MAArB,KAAgC,CAAhC,CAAD,GAAsC,CAAtC,CAA7B,CAHkB;KAApB;;;;;;;;;;;;;;;;GAPmB;;;;;;;AAcnB,0BAAiC,2CAAjC,wGAAmD;;;UAAzC,yBAAyC;UAAjC,6BAAiC;;AACjD,8BAAwB,GAAxB,CAA4B,MAA5B,EAAoC,aAAa,YAAb,CAApC,CADiD;KAAnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAdmB;;AAgCnB,MAAI,IAAI,eAAe,eAAf,CAhCW;AAiCnB,MAAI,IAAI,IAAJ,CAjCe;AAkCnB,MAAI,IAAK,IAAI,CAAJ,CAlCU;;AAoCnB,MAAI,OAAO,IAAI,CAAJ,CApCQ;AAqCnB,MAAI,KAAK,KAAK,IAAL,CAAW,IAAI,CAAJ,GAAQ,CAAR,CAAhB;;;;;;;;;;;AArCe,SAgDnB,CAAQ,GAAR,CAAY,kEAAZ,EAhDmB;AAiDnB,UAAQ,GAAR,eAAwB,KAAK,MAAL,4BAAkC,KAAK,OAAL,CAAa,CAAb,CAA1D,EAjDmB;AAkDnB,UAAQ,GAAR,aAAsB,KAAK,MAAL,4BAAkC,GAAG,OAAH,CAAW,CAAX,CAAxD,EAlDmB;AAmDnB,UAAQ,GAAR,CAAY,qBAAZ,EAnDmB;AAoDnB,UAAQ,GAAR,8BAAsC,OAAO,EAAP,eAAiB,OAAO,EAAP,CAAvD,EApDmB;AAqDnB,UAAQ,GAAR,8BAAsC,OAAO,IAAE,EAAF,eAAY,OAAO,IAAE,EAAF,CAAhE,EArDmB;AAsDnB,UAAQ,GAAR,8BAAsC,OAAO,IAAE,EAAF,eAAY,OAAO,IAAE,EAAF,CAAhE,EAtDmB;CAArB;;AAyDA,SAAS,OAAT,CAAkB,KAAlB","file":"index.js","sourcesContent":["'use strict';\n\nvar murmur = require('murmurhash-js');\nvar tape = require('tape');\n\nvar datasets = [\n  require('./mocks/1000_keys_of_length_10'),\n  require('./mocks/10000_keys_of_length_10'),\n  require('./mocks/100000_keys_of_length_10')\n];\n\nfunction engine(key, seed) {\n  return murmur(key, seed) % 100;\n}\n\nfunction stats(keys) {\n  let numberOfBuckets = 100;\n  let universeSize = keys.length;\n  let collisionCounter = new Map();\n  let probabilityDistribution = new Map();\n\n  // translate values to bucket and accumulate collisions\n  for (let k of keys) {\n    let bucket = engine(k, 424344136);\n\n    collisionCounter.set(bucket, (collisionCounter.get(bucket) || 0) + 1);\n  }\n\n  // calculate probability of each bucket\n  for (let [bucket, collisions] of collisionCounter) {\n    probabilityDistribution.set(bucket, collisions / universeSize);\n  }\n\n  // @TODO Test around 0.01\n\n  //\n  // We expect always # keys / 100 buckets will be equal, so we distribute elements\n  // using that expectation (validated before with the 0.01 test).\n  //\n  // Given it's an experiment were it's in the bucket, or not, we could analyse the\n  // problem as follow:\n  //\n  // - Each bucket will have N = 1000 keys (assuming a universe of 100000 keys )\n  // - The probability P of success is 0.01\n  // - The probability Q of failure is 0.99\n  //\n\n  let n = universeSize / numberOfBuckets;\n  let p = 0.01;\n  let q = (1 - p);\n\n  let mean = n * p;\n  let sd = Math.sqrt( n * p * q );\n\n  //  for (let [b, p] of p) {\n  //    mean += b * p;\n  //  }\n  //\n  //  for (let [b, p] of p) {\n  //    sd += p * Math.pow(b - mean, 2);\n  //  }\n  //  sd = Math.sqrt(sd);\n\n  console.log('================================================================');\n  console.log(`Mean for ${keys.length} keys of length 10: ${mean.toFixed(2)}`);\n  console.log(`SD for ${keys.length} keys of length 10: ${sd.toFixed(2)}`);\n  console.log('==> Rule 68-95-99.7');\n  console.log(`68.27% will be between ${mean - sd} and ${mean + sd}`);\n  console.log(`95.45% will be between ${mean - 2*sd} and ${mean + 2*sd}`);\n  console.log(`99.73% will be between ${mean - 3*sd} and ${mean + 3*sd}`);\n}\n\ndatasets.forEach( stats );\n"]}