{"version":3,"sources":["../../es6/engine/index.spec.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,SAAS,QAAQ,qBAAR,CAAT;AACJ,IAAI,iBAAiB,QAAQ,+BAAR,CAAjB;AACJ,IAAI,OAAO,QAAQ,mCAAR,CAAP;;AAEJ,KAAK,yCAAL,EAAgD,UAAU,MAAV,EAAkB;AAChE,MAAI,aAAa,IAAI,GAAJ,GAAU,GAAV,CAAc,eAAe,IAAf,CAAoB,EAApB,EAAwB,GAAtC,CAAb,CAD4D;AAEhE,MAAI,YAAY,CAAZ,CAF4D;AAGhE,MAAI,cAAc,CAAd,CAH4D;;AAKhE,MAAI,YAAY,KAAK,GAAL,EAAZ,CAL4D;;;;;;;AAOhE,yBAAc,8BAAd,oGAAoB;UAAX,gBAAW;;AAClB,aAAO,IAAP,CAAY,CAAZ,EAAe,SAAf,EAA0B,UAA1B,IAAwC,WAAxC,GAAsD,aAAtD,CADkB;KAApB;;;;;;;;;;;;;;GAPgE;;AAWhE,MAAI,UAAU,KAAK,GAAL,EAAV,CAX4D;;AAahE,SAAO,IAAP,CAAY,cAAc,IAAd,EAAoB,kCAAhC,EAbgE;AAchE,SAAO,IAAP,CAAY,gBAAgB,CAAhB,EAAmB,mCAA/B,EAdgE;AAehE,SAAO,OAAP,uBAAmC,CAAC,UAAU,SAAV,CAAD,GAAwB,IAAxB,aAAnC,EAfgE;AAgBhE,SAAO,GAAP,GAhBgE;CAAlB,CAAhD;;AAmBA,KAAK,sDAAL,EAA6D,UAAU,MAAV,EAAkB;AAC7E,MAAI,aAAa,IAAI,GAAJ,GAAU,GAAV,CAAc,eAAe,IAAf,CAAoB,EAApB,EAAwB,EAAtC,CAAb,CADyE;AAE7E,MAAI,YAAY,CAAZ,CAFyE;AAG7E,MAAI,cAAc,CAAd,CAHyE;;;;;;;AAK7E,0BAAc,+BAAd,wGAAoB;UAAX,iBAAW;;AAClB,UAAI,OAAO,IAAP,CAAY,CAAZ,EAAe,SAAf,EAA0B,UAA1B,CAAJ,EAA2C;AACzC,oBADyC;OAA3C,MAEO;AACL,sBADK;OAFP;KADF;;;;;;;;;;;;;;GAL6E;;AAa7E,MAAI,QAAQ,KAAK,MAAL,CAbiE;AAc7E,MAAI,eAAe,YAAY,GAAZ,GAAkB,KAAlB,CAd0D;AAe7E,MAAI,iBAAiB,cAAc,GAAd,GAAoB,KAApB,CAfwD;;AAiB7E,MAAI,MAAM,KAAK,OAAO,SAAP,CAjB8D;AAkB7E,MAAI,MAAM,KAAK,OAAO,SAAP,CAlB8D;;AAoB7E,SAAO,IAAP,CAAY,OAAO,YAAP,IAAuB,gBAAgB,GAAhB,yCAA0D,YAA7F,EApB6E;AAqB7E,SAAO,IAAP,CAAY,OAAO,cAAP,IAAyB,kBAAkB,GAAlB,2CAA8D,cAAnG,EArB6E;AAsB7E,SAAO,GAAP,GAtB6E;CAAlB,CAA7D","file":"index.spec.js","sourcesContent":["'use strict';\n\nvar tape = require('tape');\nvar engine = require('../../../lib/engine');\nvar partitionTypes = require('../../../lib/partitions/types');\nvar keys = require('./mocks/1000_keys_10_chart_length');\n\ntape('The engine should evaluates always true', function (assert) {\n  let partitions = new Map().set(partitionTypes.enum.ON, 100);\n  let okCounter = 0;\n  let failCounter = 0;\n\n  let startTime = Date.now();\n\n  for (let k of keys) {\n    engine.isOn(k, 424344136, partitions) ? okCounter++ : failCounter++;\n  }\n\n  let endTime = Date.now();\n\n  assert.true(okCounter === 1000, 'ALL keys should evaluate to true');\n  assert.true(failCounter === 0, 'ANY keys should evaluate to false');\n  assert.comment(`Evaluation takes ${(endTime - startTime) / 1000} seconds`);\n  assert.end();\n});\n\ntape('The engine should evaluates half true and half false', function (assert) {\n  let partitions = new Map().set(partitionTypes.enum.ON, 50);\n  let okCounter = 0;\n  let failCounter = 0;\n\n  for (let k of keys) {\n    if (engine.isOn(k, 424344136, partitions)) {\n      okCounter++;\n    } else {\n      failCounter++;\n    }\n  }\n\n  let total = keys.length;\n  let percentageOk = okCounter * 100 / total;\n  let percentageFail = failCounter * 100 / total;\n\n  let inf = 50 - engine.TOLERANCE;\n  let sup = 50 + engine.TOLERANCE;\n\n  assert.true(inf <= percentageOk && percentageOk <= sup, `OK should be between(49.9, 50.1): ${percentageOk}`);\n  assert.true(inf <= percentageFail && percentageFail <= sup, `FAIL should be between(49.9, 50.1): ${percentageFail}`);\n  assert.end();\n});\n"]}