{"version":3,"sources":["../../es6/settings/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAeA,SAAS,QAAT,CAAkB,sBAAlB,iBAA0D;AACxD,MAAI,OAAO;AACT,UAAM;AACJ,wBAAkB,SAAlB;AACA,WAAK,SAAL;AAFI,KAAN;AAIA,eAAW;AACT,2BAAqB,KAArB;AACA,2BAAqB,KAArB;AACA,0BAAoB,MAApB;AACA,8BAAwB,MAAxB;AAJS,KAAX;GALE,CADoD;;AAcxD,MAAI,QAAQ,sBAAc,EAAd,EAAkB,IAAlB,EAAwB,MAAxB,CAAR;;;;AAdoD,MAkBpD,OAAO,MAAM,IAAN,CAAW,gBAAX,KAAgC,QAAvC,EAAiD;AACnD,UAAM,MAAM,6DAAN,CAAN,CADmD;GAArD;;;;AAlBwD,MAwBpD,OAAO,MAAM,SAAN,CAAgB,mBAAhB,KAAwC,QAA/C,EAAyD;AAC3D,UAAM,SAAN,CAAgB,mBAAhB,GAAsC,KAAK,SAAL,CAAe,mBAAf,CADqB;GAA7D;;AAIA,MAAI,OAAO,MAAM,SAAN,CAAgB,mBAAhB,KAAwC,QAA/C,EAAyD;AAC3D,UAAM,SAAN,CAAgB,mBAAhB,GAAsC,KAAK,SAAL,CAAe,mBAAf,CADqB;GAA7D;;AAIA,MAAI,OAAO,MAAM,SAAN,CAAgB,kBAAhB,KAAuC,QAA9C,EAAwD;AAC1D,UAAM,SAAN,CAAgB,kBAAhB,GAAqC,KAAK,SAAL,CAAe,kBAAf,CADqB;GAA5D;;AAIA,MAAI,OAAO,MAAM,SAAN,CAAgB,sBAAhB,KAA2C,QAAlD,EAA4D;AAC9D,UAAM,SAAN,CAAgB,sBAAhB,GAAyC,KAAK,SAAL,CAAe,sBAAf,CADqB;GAAhE;;;;AApCwD,SA0CjD,KAAP,CA1CwD;CAA1D;;AA6CA,IAAI,WAAW,IAAX;;AAEJ,OAAO,OAAP,GAAiB;AACf,gCAAU,QAAQ;AAChB,eAAW,SAAS,MAAT,CAAX,CADgB;;AAGhB,WAAO,IAAP,CAHgB;GADH;AAOf,oBAAI,aAAa;AACf,QAAI,CAAC,QAAD,EAAW;AACb,YAAM,MAAM,mDAAN,CAAN,CADa;KAAf;;AAIA,YAAQ,WAAR;AACE,WAAK,SAAL;AACE,eAAO,mBAAP,CADF;AADF,WAGO,MAAL;AACE,eAAO,SAAS,IAAT,CADT;AAHF,WAKO,WAAL;AACE,eAAO,SAAS,SAAT,CADT;AALF,WAOO,kBAAL;AACE,eAAO,SAAS,IAAT,CAAc,gBAAd,CADT;AAPF,WASO,KAAL;AACE,eAAO,SAAS,IAAT,CAAc,GAAd,CADT;AATF,WAWO,qBAAL;AACE,eAAO,SAAS,SAAT,CAAmB,mBAAnB,CADT;AAXF,WAaO,qBAAL;AACE,eAAO,SAAS,SAAT,CAAmB,mBAAnB,CADT;AAbF,WAeO,oBAAL;AACE,eAAO,SAAS,SAAT,CAAmB,kBAAnB,CADT;AAfF,WAiBO,wBAAL;AACE,eAAO,SAAS,SAAT,CAAmB,sBAAnB,CADT;AAjBF,KALe;GAPF;CAAjB","file":"index.js","sourcesContent":["\n/*::\n  type Settings = {\n    core: {\n      authorizationKey: string,\n      key: ?string\n    },\n    scheduler: {\n      featuresRefreshRate: number,\n      segmentsRefreshRate: number,\n      metricsRefreshRate: number,\n      impressionsRefreshRate: number\n    }\n  };\n*/\nfunction defaults(custom /*: Settings */) /*: Settings */ {\n  let init = {\n    core: {\n      authorizationKey: undefined,   // API token (tight to an environment)\n      key: undefined                 // user key in your system (only required for browser version).\n    },\n    scheduler: {\n      featuresRefreshRate: 60000,    // milis (1min)\n      segmentsRefreshRate: 60000,    // milis (1min)\n      metricsRefreshRate: 300000,    // milis (5min)\n      impressionsRefreshRate: 300000 // milis (5min)\n    }\n  };\n\n  let final = Object.assign({}, init, custom);\n\n  // we can't start the engine without the authorization token.\n\n  if (typeof final.core.authorizationKey !== 'string') {\n    throw Error('Please provide an authorization token to startup the engine');\n  }\n\n  // override invalid values with default ones\n\n  if (typeof final.scheduler.featuresRefreshRate !== 'number') {\n    final.scheduler.featuresRefreshRate = init.scheduler.featuresRefreshRate;\n  }\n\n  if (typeof final.scheduler.segmentsRefreshRate !== 'number') {\n    final.scheduler.segmentsRefreshRate = init.scheduler.segmentsRefreshRate;\n  }\n\n  if (typeof final.scheduler.metricsRefreshRate !== 'number') {\n    final.scheduler.metricsRefreshRate = init.scheduler.metricsRefreshRate;\n  }\n\n  if (typeof final.scheduler.impressionsRefreshRate !== 'number') {\n    final.scheduler.impressionsRefreshRate = init.scheduler.impressionsRefreshRate;\n  }\n\n  // return an object with all the magic on it\n\n  return final;\n}\n\nlet settings = null;\n\nmodule.exports = {\n  configure(params) {\n    settings = defaults(params);\n\n    return this;\n  },\n\n  get(settingName) {\n    if (!settings) {\n      throw Error('Asked for configurations before they were defined');\n    }\n\n    switch (settingName) {\n      case 'version':\n        return 'javascript-0.26.0';\n      case 'core':\n        return settings.core;\n      case 'scheduler':\n        return settings.scheduler;\n      case 'authorizationKey':\n        return settings.core.authorizationKey;\n      case 'key':\n        return settings.core.key;\n      case 'featuresRefreshRate':\n        return settings.scheduler.featuresRefreshRate;\n      case 'segmentsRefreshRate':\n        return settings.scheduler.segmentsRefreshRate;\n      case 'metricsRefreshRate':\n        return settings.scheduler.metricsRefreshRate;\n      case 'impressionsRefreshRate':\n        return settings.scheduler.impressionsRefreshRate;\n    }\n  }\n};\n"]}