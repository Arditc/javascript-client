{"version":3,"sources":["../../es6/scheduler/index.spec.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAgBA,IAAM,OAAO,QAAQ,MAAR,CAAP;AACN,IAAM,YAAY,QAAQ,wBAAR,GAAZ;;AAEN,KAAK,6EAAL,EAAoF,kBAAU;AAC5F,MAAI,UAAU,CAAV,CADwF;AAE5F,MAAI,cAAc,CAAd,CAFwF;AAG5F,WAAS,IAAT,GAAgB;AAAE,cAAF;GAAhB;;AAEA,YAAU,OAAV,CAAkB,IAAlB,EAAwB,GAAxB;;AAL4F,YAO5F,CAAW,YAAW;AACpB,cAAU,IAAV;;AADoB,eAGpB,GAAc,OAAd,CAHoB;AAIpB,WAAO,IAAP,CAAY,WAAW,CAAX,EAAc,qCAA1B,EAJoB;;AAMpB,eAAW,YAAW;AACpB,aAAO,IAAP,CAAY,YAAY,WAAZ,EAAyB,uBAArC,EADoB;AAEpB,aAAO,GAAP,GAFoB;KAAX,EAGR,GAHH,EANoB;GAAX,EAUR,GAVH,EAP4F;CAAV,CAApF;;AAoBA,KAAK,8DAAL,EAAqE,kBAAU;AAC7E,MAAI,UAAU,CAAV,CADyE;AAE7E,WAAS,IAAT,GAAgB;AAAE,cAAF;GAAhB;;AAEA,YAAU,OAAV,CAAkB,IAAlB,EAAwB,GAAxB;AAJ6E,WAK7E,CAAU,IAAV,GAL6E;AAM7E,YAAU,IAAV,GAN6E;AAO7E,YAAU,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAP6E;AAQ7E,YAAU,IAAV,GAR6E;;AAU7E,SAAO,IAAP,CAAY,YAAY,CAAZ,EAAe,+BAA3B,EAV6E;AAW7E,SAAO,GAAP,GAX6E;CAAV,CAArE","file":"index.spec.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nconst tape = require('tape');\nconst scheduler = require('../../../lib/scheduler')();\n\ntape('SCHEDULER / once we kill the scheduler, the task should not be called again', assert => {\n  let counter = 0;\n  let lastCounter = 0;\n  function task() { counter++; }\n\n  scheduler.forever(task, 0.1); // fire the task around 0.1s + task time\n\n  setTimeout(function() {\n    scheduler.kill(); // stop forever scheduling\n\n    lastCounter = counter;\n    assert.true(counter >= 1, 'at least 1 call should be completed');\n\n    setTimeout(function() {\n      assert.true(counter === lastCounter, 'the calls should stop');\n      assert.end();\n    }, 200);\n  }, 200);\n});\n\ntape('SCHEDULER / multiple calls to kill should not throw an error', assert => {\n  let counter = 0;\n  function task() { counter++; }\n\n  scheduler.forever(task, 0.1); // fire the task around 0.1s + task time\n  scheduler.kill();\n  scheduler.kill();\n  scheduler.forever(task, 0.1);\n  scheduler.kill();\n\n  assert.true(counter === 2, 'task should be called 2 times');\n  assert.end();\n});\n"]}