{"version":3,"sources":["../../es6/binarySearch/index.spec.js"],"names":[],"mappings":"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","file":"index.spec.js","sourcesContent":["'use strict';\n\nlet tape = require('tape');\nlet bs = require('../../../lib/binarySearch');\n\ntape('BINARY SEARCH / given [1,3,5,7,10] as dataset look for several elements', assert => {\n  let searchFor = bs.bind(null, [1, 3, 5, 7, 10]);\n  let index = undefined;\n  let value = -1;\n\n  index = searchFor(value);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  value++; // 0\n  index = searchFor(value);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  value++; // 1\n  index = searchFor(value);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  value++; // 2\n  index = searchFor(value);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  value++; // 3\n  index = searchFor(value);\n  assert.true(index === 1, `expected value 1, returned ${index}`);\n\n  value++; // 4\n  index = searchFor(value);\n  assert.true(index === 1, `expected value 1, returned ${index}`);\n\n  value++; // 5\n  index = searchFor(value);\n  assert.true(index === 2, `expected value 2, returned ${index}`);\n\n  value++; // 6\n  index = searchFor(value);\n  assert.true(index === 2, `expected value 2, returned ${index}`);\n\n  value++; // 7\n  index = searchFor(value);\n  assert.true(index === 3, `expected value 3, returned ${index}`);\n\n  value++; // 8\n  index = searchFor(value);\n  assert.true(index === 3, `expected value 3, returned ${index}`);\n\n  value++; // 9\n  index = searchFor(value);\n  assert.true(index === 3, `expected value 3, returned ${index}`);\n\n  value++; // 10\n  index = searchFor(value);\n  assert.true(index === 4, `expected value 4, returned ${index}`);\n\n  value++; // 11\n  index = searchFor(value);\n  assert.true(index === 4, `expected value 4, returned ${index}`);\n\n  value++; // 12\n  index = searchFor(value);\n  assert.true(index === 4, `expected value 4, returned ${index}`);\n\n  assert.end();\n});\n\ntape('BINARY SEARCH / run test using integer keys', assert => {\n  const KEYS = [\n    1000,    1500,    2250,   3375,    5063,\n    7594,    11391,   17086,  25629,   38443,\n    57665,   86498,   129746, 194620,  291929,\n    437894,  656841,  985261, 1477892, 2216838,\n    3325257, 4987885, 7481828\n  ];\n\n  let searchFor = bs.bind(null, KEYS);\n\n  let index = searchFor(10);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  index = searchFor(1001);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  index = searchFor(1499);\n  assert.true(index === 0, `expected value 0, returned ${index}`);\n\n  index = searchFor(1500);\n  assert.true(index === 1, `expected value 0, returned ${index}`);\n\n  index = searchFor(2200);\n  assert.true(index === 1, `expected value 0, returned ${index}`);\n\n  index = searchFor(2251);\n  assert.true(index === 2, `expected value 0, returned ${index}`);\n\n  assert.end();\n});\n\ntape('BINARY SEARCH / run test using float keys', assert => {\n  const KEYS = [\n    1, 1.5, 2.25, 3.38, 5.06, 7.59, 11.39, 17.09, 25.63, 38.44,\n    57.67, 86.5, 129.75, 194.62, 291.93, 437.89, 656.84, 985.26, 1477.89,\n    2216.84, 3325.26, 4987.89, 77481.83\n  ];\n\n  let searchFor = bs.bind(null, KEYS);\n\n  let index = searchFor(3.38);\n  assert.true(index === 3, `expected value 3, returned ${index}`);\n\n  index = searchFor(6);\n  assert.true(index === 4, `expected value 4, returned ${index}`);\n\n  index = searchFor(500.55);\n  assert.true(index === 15, `expected value 15, returned ${index}`);\n\n  index = searchFor(77481.83);\n  assert.true(index === 22, `expected value 22, returned ${index}`);\n\n  index = searchFor(80000);\n  assert.true(index === 22, `expected value 22, returned ${index}`);\n\n  assert.end();\n});\n"]}