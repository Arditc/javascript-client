{"version":3,"sources":["../../es6/ds/splitChanges.js"],"names":[],"mappings":"WAAY;;;;;;;;;;;;;;;AAeZ,QAAQ,gBAAR;AACA,QAAQ,kBAAR;;AAEA,IAAI,MAAM,QAAQ,OAAR,EAAiB,oBAAjB,CAAN;AACJ,IAAI,MAAM,QAAQ,QAAR,CAAN;;AAEJ,IAAI,sBAAsB,QAAQ,0BAAR,CAAtB;AACJ,IAAI,QAAQ,IAAI,GAAJ,EAAR;;AAEJ,SAAS,iBAAT,CAA2B,gBAA3B,EAA6C;AAC3C,SAAU,kCAAV,CAD2C;CAA7C;;AAIA,SAAS,sBAAT,OAAoD;MAAnB,yCAAmB;;AAClD,MAAI,WAAW,kBAAkB,gBAAlB,CAAX,CAD8C;AAElD,MAAI,aAAa,MAAM,GAAN,CAAU,QAAV,KAAuB,CAAvB,CAFiC;;AAIlD,SAAO,MAAM,6BAA2B,UAA3B,CAAN,EAAgD;AACrD,YAAQ,KAAR;AACA,aAAS;AACP,gBAAU,kBAAV;AACA,sBAAgB,kBAAhB;AACA,mCAA2B,gBAA3B;KAHF;GAFK,EAQN,IARM,CAQD;WAAQ,KAAK,IAAL;GAAR,CARC,CASN,IATM,CASD,gBAAQ;QACP,OAAgB,KAAhB,KADO;QACD,SAAU,KAAV,OADC;;AAGZ,UAAM,GAAN,CAAU,QAAV,EAAoB,IAApB,EAHY;;AAKZ,WAAO,oBAAqB,MAArB,CAAP,CALY;GAAR,CATC,CAgBN,KAhBM,CAgBA,iBAAS;AACd,cAAQ,+DAA0D,wBAAmB,WAArF,EADc;;AAGd,WAAO,KAAP,CAHc;GAAT,CAhBP,CAJkD;CAApD;;AA2BA,OAAO,OAAP,GAAiB,sBAAjB","file":"splitChanges.js","sourcesContent":["/* @flow */ 'use strict';\n\n/**\n@TODO\n\n1- We are not going to have multiple keys in the same instance of the SDK, so\n   there is no need of cache \"strategies\" for the since value.\n3- URLs should be handled in another way, probably reading a configuration file\n   so clients could build / configure servers deployments.\n4- DataSources could be abstracted because for now, both implementations are the\n   same.\n5- LOG should be only present while we use development mode.\n\n**/\n\nrequire('babel-polyfill');\nrequire('isomorphic-fetch');\n\nlet log = require('debug')('splitio-cache:http');\nlet url = require('../url');\n\nlet splitMutatorFactory = require('../mutators/splitChanges');\nlet cache = new Map();\n\nfunction cacheKeyGenerator(authorizationKey) {\n  return `${authorizationKey}/splitChanges`;\n}\n\nfunction splitChangesDataSource({authorizationKey}) {\n  let cacheKey = cacheKeyGenerator(authorizationKey);\n  let sinceValue = cache.get(cacheKey) || 0;\n\n  return fetch(url(`/splitChanges?since=${sinceValue}`), {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorizationKey}`\n    }\n  })\n  .then(resp => resp.json())\n  .then(json => {\n    let {till, splits} = json;\n\n    cache.set(cacheKey, till);\n\n    return splitMutatorFactory( splits );\n  })\n  .catch(error => {\n    log(`[${authorizationKey}] failure fetching splits using since [${sinceValue}] => [${error}]`);\n\n    return error;\n  });\n}\n\nmodule.exports = splitChangesDataSource;\n"]}