{"version":3,"sources":["../../es6/ds/splitChanges.js"],"names":[],"mappings":"WAAY,YAAY;;;;;;;;;;;;;;;AAAC,AAezB,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1B,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAE5B,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAAC;;AAEjD,IAAI,mBAAmB,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;AAC9D,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;;AAEtB,SAAS,iBAAiB,CAAC,gBAAgB,EAAE;AAC3C,SAAU,gBAAgB,mBAAgB;CAC3C;;AAED,SAAS,sBAAsB,OAAqB;MAAnB,gBAAgB,QAAhB,gBAAgB;;AAC/C,MAAI,QAAQ,GAAG,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;AACnD,MAAI,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAE1C,SAAO,KAAK,mDAAiD,UAAU,EAAI;AACzE,UAAM,EAAE,KAAK;AACb,WAAO,EAAE;AACP,cAAQ,EAAE,kBAAkB;AAC5B,oBAAc,EAAE,kBAAkB;AAClC,qBAAe,cAAY,gBAAgB,AAAE;KAC9C;GACF,CAAC,CACD,IAAI,CAAC,UAAA,IAAI;WAAI,IAAI,CAAC,IAAI,EAAE;GAAA,CAAC,CACzB,IAAI,CAAC,UAAA,IAAI,EAAI;QACP,IAAI,GAAY,IAAI,CAApB,IAAI;QAAE,MAAM,GAAI,IAAI,CAAd,MAAM;;AAEjB,SAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;AAE1B,WAAO,mBAAmB,CAAE,MAAM,CAAE,CAAC;GACtC,CAAC,CACD,KAAK,CAAC,UAAA,KAAK,EAAI;AACd,OAAG,OAAK,gBAAgB,+CAA0C,UAAU,cAAS,KAAK,OAAI,CAAC;;AAE/F,WAAO,KAAK,CAAC;GACd,CAAC,CAAC;CACJ;;AAED,MAAM,CAAC,OAAO,GAAG,sBAAsB,CAAC","file":"splitChanges.js","sourcesContent":["/* @flow */ 'use strict';\n\n/**\n@TODO\n\n1- We are not going to have multiple keys in the same instance of the SDK, so\n   there is no need of cache \"strategies\" for the since value.\n3- URLs should be handled in another way, probably reading a configuration file\n   so clients could build / configure servers deployments.\n4- DataSources could be abstracted because for now, both implementations are the\n   same.\n5- LOG should be only present while we use development mode.\n\n**/\n\nrequire('babel-polyfill');\nrequire('isomorphic-fetch');\n\nlet log = require('debug')('splitio-cache:http');\n\nlet splitMutatorFactory = require('../mutators/splitChanges');\nlet cache = new Map();\n\nfunction cacheKeyGenerator(authorizationKey) {\n  return `${authorizationKey}/splitChanges`;\n}\n\nfunction splitChangesDataSource({authorizationKey}) {\n  let cacheKey = cacheKeyGenerator(authorizationKey);\n  let sinceValue = cache.get(cacheKey) || 0;\n\n  return fetch(`http://localhost:8081/api/splitChanges?since=${sinceValue}`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorizationKey}`\n    }\n  })\n  .then(resp => resp.json())\n  .then(json => {\n    let {till, splits} = json;\n\n    cache.set(cacheKey, till);\n\n    return splitMutatorFactory( splits );\n  })\n  .catch(error => {\n    log(`[${authorizationKey}] failure fetching splits using since [${sinceValue}] => [${error}]`);\n\n    return error;\n  });\n}\n\nmodule.exports = splitChangesDataSource;\n"]}