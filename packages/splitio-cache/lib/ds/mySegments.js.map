{"version":3,"sources":["../../es6/ds/mySegments.js"],"names":[],"mappings":"WAAY;;AAEZ,QAAQ,kBAAR;;AAEA,IAAI,MAAM,QAAQ,sCAAR,CAAN;AACJ,IAAI,MAAM,QAAQ,OAAR,EAAiB,oBAAjB,CAAN;;AAEJ,IAAI,4BAA4B,QAAQ,wBAAR,CAA5B;;;;;;;;AAQJ,SAAS,oBAAT,+CAAgG;MAAjE,yCAAiE;MAA/C,eAA+C;;AAC9F,SAAO,MAAM,qBAAmB,GAAnB,CAAN,EAAiC;AACtC,YAAQ,KAAR;AACA,aAAS;AACP,gBAAU,kBAAV;AACA,sBAAgB,kBAAhB;AACA,mCAA2B,gBAA3B;KAHF;GAFK,EAQN,IARM,CAQD;WAAQ,KAAK,IAAL;GAAR,CARC,CASN,IATM,CASD,gBAAQ;AACZ,cAAQ,0CAAqC,GAA7C,EAAoD,IAApD,EADY;;AAGZ,WAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB;aAAW,QAAQ,IAAR;KAAX,CAA3B,CAHY;GAAR,CATC,CAcN,IAdM,CAcD;WAAc,0BAA0B,UAA1B;GAAd,CAdC,CAeN,KAfM,CAeA,iBAAS;AACd,cAAQ,wDAAmD,SAA3D,EADc;;AAGd,WAAO,KAAP,CAHc;GAAT,CAfP,CAD8F;CAAhG;;AAuBA,OAAO,OAAP,GAAiB,oBAAjB","file":"mySegments.js","sourcesContent":["/* @flow */ 'use strict';\n\nrequire('isomorphic-fetch');\n\nlet url = require('@splitsoftware/splitio-utils/lib/url');\nlet log = require('debug')('splitio-cache:http');\n\nlet mySegmentMutationsFactory = require('../mutators/mySegments');\n\n/*::\n  type MySergmentsRequest = {\n    authorizationKey: string,\n    key: string\n  }\n*/\nfunction mySegmentsDataSource({authorizationKey, key} /*: MySergmentsRequest */) /*: Promise */ {\n  return fetch(url(`/mySegments/${key}`), {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorizationKey}`\n    }\n  })\n  .then(resp => resp.json())\n  .then(json => {\n    log(`[${authorizationKey}] /mySegments for ${key}`, json);\n\n    return json.mySegments.map(segment => segment.name);\n  })\n  .then(mySegments => mySegmentMutationsFactory(mySegments))\n  .catch(error => {\n    log(`[${authorizationKey}] failure fetching my segments [${key}]`);\n\n    return error;\n  });\n}\n\nmodule.exports = mySegmentsDataSource;\n"]}