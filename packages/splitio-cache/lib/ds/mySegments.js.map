{"version":3,"sources":["../../es6/ds/mySegments.js"],"names":[],"mappings":"WAAY;;AAEZ,QAAQ,gBAAR;AACA,QAAQ,kBAAR;;AAEA,IAAI,4BAA4B,QAAQ,wBAAR,CAA5B;AACJ,IAAI,MAAM,QAAQ,QAAR,CAAN;AACJ,IAAI,MAAM,QAAQ,OAAR,EAAiB,oBAAjB,CAAN;;;;;;;;AAQJ,SAAS,oBAAT,+CAAmG;MAApE,yCAAoE;MAAlD,qBAAkD;;AACjG,SAAO,MAAM,qBAAmB,MAAnB,CAAN,EAAoC;AACzC,YAAQ,KAAR;AACA,aAAS;AACP,gBAAU,kBAAV;AACA,sBAAgB,kBAAhB;AACA,mCAA2B,gBAA3B;KAHF;GAFK,EAQN,IARM,CAQD;WAAQ,KAAK,IAAL;GAAR,CARC,CASN,IATM,CASD;WAAQ,KAAK,UAAL,CAAgB,GAAhB,CAAoB;aAAW,QAAQ,IAAR;KAAX;GAA5B,CATC,CAUN,IAVM,CAUD;WAAc,0BAA0B,UAA1B;GAAd,CAVC,CAWN,KAXM,CAWA,iBAAS;AACd,cAAQ,wDAAmD,YAA3D,EADc;;AAGd,WAAO,KAAP,CAHc;GAAT,CAXP,CADiG;CAAnG;;AAmBA,OAAO,OAAP,GAAiB,oBAAjB","file":"mySegments.js","sourcesContent":["/* @flow */ 'use strict';\n\nrequire('babel-polyfill');\nrequire('isomorphic-fetch');\n\nlet mySegmentMutationsFactory = require('../mutators/mySegments');\nlet url = require('../url');\nlet log = require('debug')('splitio-cache:http');\n\n/*::\n  type MySergmentsRequest = {\n    authorizationKey: string,\n    userId: string\n  }\n*/\nfunction mySegmentsDataSource({authorizationKey, userId} /*: MySergmentsRequest */) /*: Promise */ {\n  return fetch(url(`/mySegments/${userId}`), {\n    method: 'GET',\n    headers: {\n      'SARASA': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorizationKey}`\n    }\n  })\n  .then(resp => resp.json())\n  .then(json => json.mySegments.map(segment => segment.name))\n  .then(mySegments => mySegmentMutationsFactory(mySegments))\n  .catch(error => {\n    log(`[${authorizationKey}] failure fetching my segments [${userId}]`);\n\n    return error;\n  });\n}\n\nmodule.exports = mySegmentsDataSource;\n"]}