{"version":3,"sources":["../../es6/ds/mySegments.js"],"names":[],"mappings":"WAAY,YAAY,CAAC;;AAEzB,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1B,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAE5B,IAAI,yBAAyB,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAClE,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;;;;;;;;AAAC,AAQjD,SAAS,oBAAoB,+CAAsE;MAApE,gBAAgB,QAAhB,gBAAgB;MAAE,MAAM,QAAN,MAAM;;AAErD,SAAO,KAAK,2CAAyC,MAAM,EAAI;AAC7D,UAAM,EAAE,KAAK;AACb,WAAO,EAAE;AACP,cAAQ,EAAE,kBAAkB;AAC5B,oBAAc,EAAE,kBAAkB;AAClC,qBAAe,cAAY,gBAAgB,AAAE;KAC9C;GACF,CAAC,CACD,IAAI,CAAC,UAAA,IAAI;WAAI,IAAI,CAAC,IAAI,EAAE;GAAA,CAAC,CACzB,IAAI,CAAC,UAAA,IAAI;WAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAA,OAAO;aAAI,OAAO,CAAC,IAAI;KAAA,CAAC;GAAA,CAAC,CAC1D,IAAI,CAAC,UAAA,UAAU;WAAI,yBAAyB,CAAC,UAAU,CAAC;GAAA,CAAC,CACzD,KAAK,CAAC,UAAA,KAAK,EAAI;AACd,OAAG,OAAK,gBAAgB,wCAAmC,MAAM,OAAI,CAAC;;AAEtE,WAAO,KAAK,CAAC;GACd,CAAC,CAAC;CACJ;;AAED,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC","file":"mySegments.js","sourcesContent":["/* @flow */ 'use strict';\n\nrequire('babel-polyfill');\nrequire('isomorphic-fetch');\n\nlet mySegmentMutationsFactory = require('../mutators/mySegments');\nlet log = require('debug')('splitio-cache:http');\n\n/*::\n  type MySergmentsRequest {\n    authorizationKey: string,\n    userId: string\n  }\n*/\nfunction mySegmentsDataSource({authorizationKey, userId} /*: MySergmentsRequest */) /*: Promise */ {\n\n  return fetch(`http://localhost:8081/api/mySegments/${userId}`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorizationKey}`\n    }\n  })\n  .then(resp => resp.json())\n  .then(json => json.mySegments.map(segment => segment.name))\n  .then(mySegments => mySegmentMutationsFactory(mySegments))\n  .catch(error => {\n    log(`[${authorizationKey}] failure fetching my segments [${userId}]`);\n\n    return error;\n  });\n}\n\nmodule.exports = mySegmentsDataSource;\n"]}