{"version":3,"sources":["../../es6/ds/segmentChanges.js"],"names":[],"mappings":"WAAY,YAAY;;;;;;;;;;;;;AAAC;;AAazB,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1B,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAE5B,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAAC;;AAEjD,IAAI,qBAAqB,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAClE,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;;AAEtB,SAAS,iBAAiB,CAAC,gBAAgB,EAAE,WAAW,EAAE;AACxD,SAAU,gBAAgB,wBAAmB,WAAW,CAAG;CAC5D;;AAED,SAAS,wBAAwB,OAAkC;MAAhC,gBAAgB,QAAhB,gBAAgB;MAAE,WAAW,QAAX,WAAW;;AAC9D,MAAI,QAAQ,GAAG,iBAAiB,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;AAChE,MAAI,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAE1C,SAAO,KAAK,+CAA6C,WAAW,eAAU,UAAU,EAAI;AAC1F,UAAM,EAAE,KAAK;AACb,WAAO,EAAE;AACP,cAAQ,EAAE,kBAAkB;AAC5B,oBAAc,EAAE,kBAAkB;AAClC,qBAAe,cAAY,gBAAgB,AAAE;KAC9C;GACF,CAAC,CACD,IAAI,CAAC,UAAA,IAAI;WAAI,IAAI,CAAC,IAAI,EAAE;GAAA,CAAC,CACzB,IAAI,CAAC,UAAA,IAAI,EAAI;QACP,KAAK,GAAmB,IAAI,CAA5B,KAAK;QAAE,IAAI,GAAa,IAAI,CAArB,IAAI;;QAAK,IAAI,4BAAI,IAAI;;AAEjC,SAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;AAE1B,WAAO,qBAAqB,CAAE,IAAI,CAAE,CAAC;GACtC,CAAC,CACD,KAAK,CAAC,UAAA,KAAK,EAAI;AACd,OAAG,OAAK,gBAAgB,oCAA+B,WAAW,uBAAkB,UAAU,cAAS,KAAK,OAAI,CAAC;;AAEjH,WAAO,KAAK,CAAC;GACd,CAAC,CAAC;CACJ;;AAED,MAAM,CAAC,OAAO,GAAG,wBAAwB,CAAC","file":"segmentChanges.js","sourcesContent":["/* @flow */ 'use strict';\n\n/**\n@TODO\n\n2- URLs should be handled in another way, probably reading a configuration file\n   so clients could build / configure servers deployments.\n3- DataSources could be abstracted because for now, both implementations are the\n   same.\n4- LOG should be only present while we use development mode.\n\n**/\n\nrequire('babel-polyfill');\nrequire('isomorphic-fetch');\n\nlet log = require('debug')('splitio-cache:http');\n\nlet segmentMutatorFactory = require('../mutators/segmentChanges');\nlet cache = new Map();\n\nfunction cacheKeyGenerator(authorizationKey, segmentName) {\n  return `${authorizationKey}/segmentChanges/${segmentName}`;\n}\n\nfunction segmentChangesDataSource({authorizationKey, segmentName}) {\n  let cacheKey = cacheKeyGenerator(authorizationKey, segmentName);\n  let sinceValue = cache.get(cacheKey) || 0;\n\n  return fetch(`http://localhost:8081/api/segmentChanges/${segmentName}?since=${sinceValue}`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorizationKey}`\n    }\n  })\n  .then(resp => resp.json())\n  .then(json => {\n    let {since, till, ...data} = json;\n\n    cache.set(cacheKey, till);\n\n    return segmentMutatorFactory( data );\n  })\n  .catch(error => {\n    log(`[${authorizationKey}] failure fetching segment [${segmentName}] using since [${sinceValue}] => [${error}]`);\n\n    return error;\n  });\n}\n\nmodule.exports = segmentChangesDataSource;\n"]}