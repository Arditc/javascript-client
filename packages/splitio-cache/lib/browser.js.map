{"version":3,"sources":["../es6/browser.js"],"names":[],"mappings":"WAAY;;AAEZ,IAAI;AAAE,UAAQ,gBAAR,EAAF;CAAJ,CAAmC,OAAM,CAAN,EAAS,2CAAT;AACnC,QAAQ,kBAAR;;AAEA,IAAI,uBAAuB,QAAQ,iBAAR,CAAvB;AACJ,IAAI,yBAAyB,QAAQ,mBAAR,CAAzB;AACJ,IAAI,UAAU,QAAQ,WAAR,CAAV;;AAEJ,IAAI,MAAM,QAAQ,OAAR,EAAiB,eAAjB,CAAN;;AAEJ,SAAS,MAAT,CAAgB,8BAAhB,EAAgD,oBAAhD,gBAAqF;AACnF,YAAQ,uDAAR,EADmF;;AAGnF,MAAI,sBAAsB,uBAAuB,EAAC,kCAAD,EAAvB,EAA2C,IAA3C,CAAgD,yBAAiB;AACzF,WAAO,cAAc,QAAQ,MAAR,CAAe,MAAf,CAArB,CADyF;GAAjB,CAAtE,CAH+E;;AAOnF,MAAI,oBAAoB,qBAAqB,EAAC,kCAAD,EAAmB,cAAnB,EAArB,EAAiD,IAAjD,CAAsD,2BAAmB;AAC/F,WAAO,gBAAgB,QAAQ,QAAR,CAAiB,MAAjB,CAAvB,CAD+F;GAAnB,CAA1E,CAP+E;;AAWnF,SAAO,QAAQ,GAAR,CAAY,CAAC,mBAAD,EAAsB,iBAAtB,CAAZ,EAAsD,IAAtD,CAA4D;WAAM;GAAN,CAAnE,CAXmF;CAArF;;AAcA,OAAO,OAAP,GAAiB,MAAjB","file":"browser.js","sourcesContent":["/* @flow */ 'use strict';\n\ntry { require('babel-polyfill'); } catch(e) { /* will be replaced using just core-js */ }\nrequire('isomorphic-fetch');\n\nlet mySegmentsDataSource = require('./ds/mySegments');\nlet splitChangesDataSource = require('./ds/splitChanges');\nlet storage = require('./storage');\n\nlet log = require('debug')('splitio-cache');\n\nfunction writer(authorizationKey /*: string */, userId /*: string */) /*: Promise */ {\n  log(`[${authorizationKey}] Running updater for the browser.`);\n\n  let splitChangesPromise = splitChangesDataSource({authorizationKey}).then(splitsMutator => {\n    return splitsMutator(storage.splits.update);\n  });\n\n  let mySegmentsPromise = mySegmentsDataSource({authorizationKey, userId}).then(segmentsMutator => {\n    return segmentsMutator(storage.segments.update);\n  });\n\n  return Promise.all([splitChangesPromise, mySegmentsPromise]).then( () => storage );\n}\n\nmodule.exports = writer;\n"]}