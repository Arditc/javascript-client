{"version":3,"sources":["../../../es6/storage/splits/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAM,QAAQ,QAAQ,+BAAR,CAAR;;AAEN,SAAS,aAAT,GAAyB;AACvB,OAAK,OAAL,GAAe,mBAAf,CADuB;CAAzB;;AAIA,cAAc,SAAd,CAAwB,MAAxB,GAAiC,UAAU,OAAV,EAAuC;;;AAEtE,UAAQ,OAAR,CAAgB,iBAAS;AACvB,QAAI,CAAC,MAAM,SAAN,EAAD,EAAoB;AACtB,YAAK,OAAL,CAAa,GAAb,CAAiB,MAAM,MAAN,EAAjB,EAAiC,KAAjC,EADsB;KAAxB,MAEO;AACL,YAAK,OAAL,CAAa,MAAb,CAAoB,MAAM,MAAN,EAApB,EADK;KAFP;GADc,CAAhB,CAFsE;CAAvC;;AAYjC,cAAc,SAAd,CAAwB,GAAxB,GAA8B,UAAU,SAAV,EAAsC;AAClE,SAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,SAAjB,CAAP,CADkE;CAAtC;;;AAK9B,cAAc,SAAd,CAAwB,WAAxB,GAAsC,YAAiB;AACrD,MAAI,qBAAqB,mBAArB,CADiD;;;;;;;AAGrD,oDAAiB,KAAK,OAAL,CAAa,MAAb,UAAjB,oGAAwC;UAAhC,oBAAgC;;AACtC,2BAAqB,6DAAY,sDAAwB,MAAM,WAAN,IAApC,CAArB,CADsC;KAAxC;;;;;;;;;;;;;;GAHqD;;AAOrD,SAAO,kBAAP,CAPqD;CAAjB;;AAUtC,cAAc,SAAd,CAAwB,MAAxB,GAAiC,YAAiB;AAChD,SAAO,KAAK,OAAL,CADyC;CAAjB;;AAIjC,OAAO,OAAP,GAAiB,aAAjB","file":"index.js","sourcesContent":["const Split = require('@splitsoftware/splitio-engine');\n\nfunction SplitsStorage() {\n  this.storage = new Map();\n}\n\nSplitsStorage.prototype.update = function (updates :Array<Split>) :void {\n\n  updates.forEach(split => {\n    if (!split.isGarbage()) {\n      this.storage.set(split.getKey(), split);\n    } else {\n      this.storage.delete(split.getKey());\n    }\n  });\n\n};\n\nSplitsStorage.prototype.get = function (splitName :string) :? Split {\n  return this.storage.get(splitName);\n};\n\n// @TODO optimize this query to be cached after each update\nSplitsStorage.prototype.getSegments = function () :Set {\n  let mergedSegmentNames = new Set();\n\n  for(let split of this.storage.values()) {\n    mergedSegmentNames = new Set([...mergedSegmentNames, ...(split.getSegments())]);\n  }\n\n  return mergedSegmentNames;\n};\n\nSplitsStorage.prototype.toJSON = function () :Map {\n  return this.storage;\n};\n\nmodule.exports = SplitsStorage;\n"]}