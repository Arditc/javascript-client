{"version":3,"sources":["../../es6/mutators/splitChanges.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,QAAQ,QAAQ,+BAAR,CAAR;AACN,IAAM,QAAQ,MAAM,KAAN;;IAET;;yCACH,uCACA;;;;gCAFG;;;;;;;;IAKA;;yCACH,yCACA;;;;gCAFG;;;;;;;;IAOA;;yCACH,6CACA;aAAgB;;;;;gCAFb;;;;;;;;IAKA;;4BACW,sBAAd,qCACA;aAAkB;;;;;gCAFf;;;;;;;;IAKA;;yCACH,kCACA,kCACA,oCACA,qCACA,qDACA;aAAkB;;;;;gCANf;;;;;;;;IASA;;;aAA2B;;;;;gCAA3B;;;;;;;;AAEL,SAAS,qBAAT,CAA+B,MAA/B,EAAqE;;;;;;;;;OAA9B,mBAAR;;GAAsC;;AACnE,WAAS,cAAT,CAAwB,cAAxB,EAAwD;iBAAhC;;KAAgC;;AACtD,mBAAe,OAAO,GAAP,CAAW,KAAX,CAAf,EADsD;GAAxD;;cAIO,gBAL4D;CAArE;;AAQA,OAAO,OAAP,GAAiB,qBAAjB","file":"splitChanges.js","sourcesContent":["const Split = require('@splitsoftware/splitio-engine');\nconst parse = Split.parse;\n\ntype PartitionDTO = {\n  treatment: string,\n  size: number\n};\n\ntype MatcherDTO = {\n  matcherType: string,\n  negate: boolean,\n  userDefinedSegmentMatcherData: any,\n  whitelistMatcherData: any\n};\n\ntype MatcherGroupDTO = {\n  combiner: string,\n  matchers: Array<MatcherDTO>\n};\n\ntype ConditionDTO = {\n  matcherGroup: MatcherGroupDTO,\n  partitions: Array<PartitionDTO>\n};\n\ntype SplitDTO = {\n  name: string,\n  seed: number,\n  status: string,\n  killed: boolean,\n  defaultTreatment: string,\n  conditions: Array<ConditionDTO>\n};\n\ntype SplitDTOCollection = Array<SplitDTO>;\n\nfunction SplitMutationsFactory(splits :SplitDTOCollection) :Function {\n  function splitMutations(storageMutator :Function) :void {\n    storageMutator(splits.map(parse));\n  }\n\n  return splitMutations;\n}\n\nmodule.exports = SplitMutationsFactory;\n"]}