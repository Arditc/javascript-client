{"version":3,"sources":["../../es6/updater/segmentChanges.js"],"names":[],"mappings":"WAAY;;;;AAEZ,IAAI,2BAA2B,QAAQ,sBAAR,CAA3B;AACJ,IAAI,UAAU,QAAQ,YAAR,CAAV;AACJ,IAAI,MAAM,QAAQ,OAAR,EAAiB,uBAAjB,CAAN;;AAEJ,SAAS,qBAAT;cAEkB;MADhB,yCACgB;;AAChB,YAAQ,8CAAR;;;AADgB,MAIZ,WAAW,QAAQ,MAAR,CAAe,WAAf,EAAX;;;AAJY,SAOT,QAAQ,GAAR,CACL,6BAAI,UAAJ,CAAc,GAAd,CAAkB;WAAe,yBAAyB,EAAC,kCAAD,EAAmB,wBAAnB,EAAzB;GAAf,CADb,EAEL,IAFK,CAEA,4BAAoB;AACzB,qBAAiB,OAAjB,CAAyB;aAAW,QAAQ,QAAQ,QAAR,CAAiB,GAAjB,EAAsB,QAAQ,QAAR,CAAiB,MAAjB;KAAzC,CAAzB,CADyB;GAApB,CAFA,CAIJ,IAJI,CAIC;WAAM;GAAN,CAJR,CAPgB;CAFlB;;AAgBA,OAAO,OAAP,GAAiB,qBAAjB","file":"segmentChanges.js","sourcesContent":["/* @flow */ 'use strict';\n\nlet segmentChangesDataSource = require('../ds/segmentChanges');\nlet storage = require('../storage');\nlet log = require('debug')('splitio-cache:updater');\n\nfunction segmentChangesUpdater({\n  authorizationKey /*: string */\n}) /*: Promise */ {\n  log(`[${authorizationKey}] Updating segmentChanges`);\n\n  // Read the list of segments available.\n  let segments = storage.splits.getSegments();\n\n  // Per each segment, request the changes and mutate the storage accordingly.\n  return Promise.all(\n    [...segments].map(segmentName => segmentChangesDataSource({authorizationKey, segmentName}))\n  ).then(segmentsMutators => {\n    segmentsMutators.forEach(mutator => mutator(storage.segments.get, storage.segments.update));\n  }).then(() => storage);\n}\n\nmodule.exports = segmentChangesUpdater;\n"]}