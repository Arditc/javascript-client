{"version":3,"sources":["../../es6/updater/segmentChanges.js"],"names":[],"mappings":";;;;;;;;;;;;AAoBA,IAAM,MAAM,QAAQ,OAAR,EAAiB,uBAAjB,CAAN;;;;;;;;;;;;;;;;AAEN,IAAM,2BAA2B,QAAQ,sBAAR,CAA3B;;AAEN,IAAM,UAAU,QAAQ,YAAR,CAAV;AACN,IAAM,kBAAkB,QAAQ,QAAR;AACxB,IAAM,MAAM,gBAAgB,GAAhB,CAAoB,IAApB,CAAyB,eAAzB,CAAN;AACN,IAAM,SAAS,gBAAgB,MAAhB,CAAuB,IAAvB,CAA4B,eAA5B,CAAT;;AAEN,SAAS,qBAAT,OAA6D;MAA7B,yCAA6B;;AAC3D,YAAQ,8CAAR;;;AAD2D,MAIrD,WAAW,QAAQ,MAAR,CAAe,WAAf,EAAX;;;AAJqD,SAOpD,kBAAQ,GAAR,CACL,2CAAI,UAAJ,CAAc,GAAd,CAAkB;WAAe,yBAAyB,EAAC,kCAAD,EAAmB,wBAAnB,EAAzB;GAAf,CADb,EAEL,IAFK,CAEA,4BAAoB;AACzB,qBAAiB,OAAjB,CAAyB;aAAW,QAAQ,GAAR,EAAa,MAAb;KAAX,CAAzB,CADyB;GAApB,CAFA,CAIJ,IAJI,CAIC;WAAM;GAAN,CAJR,CAP2D;CAA7D;;AAcA,OAAO,OAAP,GAAiB,qBAAjB","file":"segmentChanges.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport type {\n  Thenable\n} from '../types';\n\nconst log = require('debug')('splitio-cache:updater');\n\nconst segmentChangesDataSource = require('../ds/segmentChanges');\n\nconst storage = require('../storage');\nconst segmentsStorage = storage.segments;\nconst get = segmentsStorage.get.bind(segmentsStorage);\nconst update = segmentsStorage.update.bind(segmentsStorage);\n\nfunction segmentChangesUpdater({authorizationKey}) :Thenable {\n  log(`[${authorizationKey}] Updating segmentChanges`);\n\n  // Read the list of segments available.\n  const segments = storage.splits.getSegments();\n\n  // Per each segment, request the changes and mutate the storage accordingly.\n  return Promise.all(\n    [...segments].map(segmentName => segmentChangesDataSource({authorizationKey, segmentName}))\n  ).then(segmentsMutators => {\n    segmentsMutators.forEach(mutator => mutator(get, update));\n  }).then(() => storage);\n}\n\nmodule.exports = segmentChangesUpdater;\n"]}