{"version":3,"sources":["../../es6/updater/mySegments.js"],"names":[],"mappings":";;AAAA,IAAM,MAAM,QAAQ,OAAR,EAAiB,uBAAjB,CAAN;;AAEN,IAAM,uBAAuB,QAAQ,kBAAR,CAAvB;;AAEN,IAAM,UAAU,QAAQ,YAAR,CAAV;AACN,IAAM,kBAAkB,QAAQ,QAAR;AACxB,IAAM,SAAS,gBAAgB,MAAhB,CAAuB,IAAvB,CAA4B,eAA5B,CAAT;;AAEN,SAAS,iBAAT,OAA6D;MAAjC,yCAAiC;MAAf,eAAe;;AAC3D,YAAQ,0CAAR,EAD2D;;AAG3D,SAAO,qBAAqB,EAAC,kCAAD,EAAmB,QAAnB,EAArB,EACI,IADJ,CACS;WAAmB,gBAAgB,MAAhB;GAAnB,CADT,CAEI,IAFJ,CAES;WAAM;GAAN,CAFhB,CAH2D;CAA7D;;AAQA,OAAO,OAAP,GAAiB,iBAAjB","file":"mySegments.js","sourcesContent":["const log = require('debug')('splitio-cache:updater');\n\nconst mySegmentsDataSource = require('../ds/mySegments');\n\nconst storage = require('../storage');\nconst segmentsStorage = storage.segments;\nconst update = segmentsStorage.update.bind(segmentsStorage);\n\nfunction mySegmentsUpdater({authorizationKey, key}) :Promise {\n  log(`[${authorizationKey}] Updating mySegments`);\n\n  return mySegmentsDataSource({authorizationKey, key})\n            .then(segmentsMutator => segmentsMutator(update))\n            .then(() => storage);\n}\n\nmodule.exports = mySegmentsUpdater;\n"]}