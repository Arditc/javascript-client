## 8.1.2 (April 6, 2017)

* Bug fixing release to improve startup performance.

## 8.1.1 (March 31, 2017)

* No API changes. Small fix on declaration files.

## 8.1.0 (March 30, 2017)

* No API changes.
* Added typescript support. SplitSDK custom types live on the SplitIO namespace.

  For example:

  ```ts
  const myTreatment: SplitIO.Treatment;
  const myBrowserSettings: SplitIO.IBrowserSettings;
  ```

## 8.0.0 (March 10, 2017)

* New API to improve development experience. We added a migration layer so you
  could use the new version of the SDK and make the migration when you have
  time.

  In the browser we only need:

  ```html
  <script src="//cdn.split.io/sdk/split-7.4.0.min.js"></script>
  ```

  Change by:

  ```html
  <script src="//cdn.split.io/sdk/split-migration-8.0.0.min.js"></script>
  ```

  In NodeJS or CommonJS environments:

  ```js
  var sdk = require('@splitsoftware/splitio');
  ```

  Change with:

  ```js
  var sdk = require('@splitsoftware/splitio/migration');
  ```

* NodeJS now added support for Redis to keep consistency across multiple SDK
  instances.

  We have added a new setting parameter to control which storage use, and how
  the SDK works internally:

  ```js
  const SplitFactory = require('@splitsoftware/splitio');
  const config = {
    mode: 'consumer',
    core: {
      authorizationKey: '<your-api-token>'
    },
    storage: {
      type: 'REDIS',
      options: {
        url: 'redis://<your-redis-server>:<your-redis-server-port>/0'
      },
      prefix: 'nodejs' // Optional prefix to prevent any kind of data collision between SDK versions.
    }
  };

  const client = SplitFactory(config);

  // Redis in NodeJS is async so we can use async/await syntax
  const treatment = await client.getTreatment('my-feature-comming-from-localstorage');

  // or just use the returned promise
  client.getTreatment('my-feature-comming-from-localstorage').then(treatment => {
    // do something with the treatment
  });
  ```

* Added Manager API to query the state of the SDK. Please check the official
  documenation for details.

* In Browser land, we can now enable localStorage as backend so we can reload
  the SDK quickly without downloading all the data again.

  This should improve the ready event significantly when you have a good amount
  of Splits in your setup.

  ```js
  const config = {
    core: {
      authorizationKey: '<your-api-token>',
      key: '<user-key>'
    },
    storage: {
      type: 'LOCALSTORAGE'
    }
  };

  const factory = splitio(config);
  const client = factory.client();

  const treatment = client.getTreatment('my-feature-comming-from-localstorage');
  ```

* Added support for offline changes release to improve development experience,
  specially in NodeJS where we used to have a server running and spin it up each
  time we change a treatment is a headache.

  ```js
  const config = {
    core: {
      authorizationKey: '<your-api-token>',
      key: '<user-key>'
    },
    scheduler: {
      offlineRefreshRate: 15 // update internal SDK state each 15 sec
    },
    features: {
      mySplit: 'on'
    }
  };

  const factory = splitio(config);
  const client = factory.client();

  await client.ready();

  client.getTreatment('my_feature') === 'on'; // true

  factory.settings.features.my_feature = 'off'; // Apply this cache programatically

  client.getTreatment('my_feature') === 'off'; // Some time after you will be able to verify this
  ```

## 7.4.0 (January 23, 2017)

* None API changes. Bug fixing release.

## 7.3.0 (January 19, 2017)

- Small addition to SDK configurations so you can inject bucketing key and labels.

## 7.1.1 (November 16, 2016)

* None API changes. Bug fixing release.

## 7.1.0 (November 15, 2016)

* None API changes. Bug fixing release.

## 7.0.1 (September 16, 2016)

* Huge project refactoring, specially focus on simplicity. We have replaced the
  library building system to get more power while we generate the release.
* Improved documentation.

## 6.0.1 (June 24, 2016)

* Critical bug fixed which prevent ready state of the SDK.

## 6.0.0 (June 24, 2016)

* In the browser land we allow quick retries before start using the refresh
  rates defined for segments and splits, plus the possibility of receive an
  event when the SDK is taking to much time to startup.

  ```html
  <script src="//cdn.split.io/sdk/split-6.0.0.min.js"></script>
  <script>
    var sdk = splitio({
      core: {
        authorizationKey: '<your-token>',
        key: 'myuser@domain.com'
      },
      startup: {
        // timeout an *initial* request after 0.8 seconds (only affects startup)
        requestTimeoutBeforeReady: 0.8,
        // how many quick retries are allowed before use the schedulers refresh
        // rates (only affects startup)
        retriesOnFailureBeforeReady: 1,
        // maximum amount of seconds we are going to wait for the ready event
        readyTimeout: 1.5
      }
    });

    sdk.on(sdk.Event.SDK_READY_TIMED_OUT, function () {
      // this callback will be called after 1.5 seconds if and only if the SDK
      // is not ready for that time
    });

    sdk.on(sdk.Event.SDK_READY, function () {
      // the SDK is ready for start making evaluations with your data
    });

    sdk.on(sdk.Event.SDK_UPDATE, function () {
      // fired each time the SDK state change
    });
  </script>
  ```

## 5.1.1 (June 13, 2016)

* None API changes. Bug fixing release.

## 5.1.0 (June 9, 2016)

* Bug fixing release.

## 5.0.0 (June 6, 2016)

* Added support for multiple instances.

  ```html
  <script src="//cdn.split.io/sdk/split-5.0.0.min.js"></script>
  <script>
    // instanciation
    var dynamic1 = splitio({
      core: {
        authorizationKey: '<your-token>',
        key: 'myuser@domain.com'
      }
    });

    var dynamic2 = splitio({
      core: {
        authorizationKey: '<your-token>',
        key: 'annoy@domain.com'
      }
    });

    // usage
    var t1 = dynamic1.getTreatment('split-name');
    var t2 = dynamic2.getTreatment('another-split-name');

    // stop SDK
    dynamic1.destroy();
    dynamic2.destroy();

    // unreference
    dynamic1 = null;
    dynamic2 = null;
  </script>
  ```

* SDK instances inherit from EventEmitter.

  ```html
  <script src="//cdn.split.io/sdk/split-5.0.0.min.js"></script>
  <script>
    var sdk = splitio({
      core: {
        authorizationKey: '<your-token>',
        key: 'myuser@domain.com'
      }
    });

    sdk.on(sdk.Event.SDK_READY, function sdkReadyEvent() {
      // This event will be fired once
    });

    sdk.on(sdk.Event.SDK_UPDATE, function sdkUpdateEvent() {
      // This event will be fired each time the SDK downloads an update
    });
  </script>
  ```

## 4.0.0 (April 13, 2016)

* No more url changes required to switch to development mode.

  ### Before (3.0.0 or earlier)
  ```html
  <script src="https://cdn.split.io/sdk/offline-3.0.0.js"></script>
  <script>
    var sdk = splitio({
      features: {
        feature_name_1: 'treatment_value_1',
        feature_name_2: 'treatment_value_2',
        ...
      }
    });
  </script>
  ```

  ### After (4+)
  ```html
  <script src="https://cdn.split.io/sdk/split-4.0.0.js"></script>
  <script>
    var sdk = splitio({
      core: {
        authorizationKey: 'localhost'
      },
      features: {
        feature_name_1: 'treatment_value_1',
        feature_name_2: 'treatment_value_2',
        ...
      }
    });
  </script>
  ```

  Now you can forget the switch between urls, everything is bundled into the same
  package!

## 3.0.0 (April 10, 2016)

* Added support for attributes.

```js
var sdk = splitio({
  core: {
    authorizationKey: 'c1l5vkd50gimccout3c03pntbu', // your API key
    key: '4a2c4490-ced1-11e5-9b97-d8a25e8b1578'     // your customer id
  }
});

var treatment = sdk.getTreatment('my_feature', {
  age: 24,
  likes: ['apple', 'orange'],
  dob: new Date('1991-05-22').getTime()
});
```

* Minor bug fixes and code clean up.

## 2.1.0 (March 29, 2016)

* Added better handling of possible error situations when:

  1. If there is none defaultTreatment present, use 'control' treatment.
  2. Unexpected matcher structures should produce a 'control' treatment.

## 2.0.0 (March 21, 2016)

### Breaking Changes

* If you are using custom refresh rates, please change them from milliseconds to
seconds:

```js
var sdk = splitio({
  core: {
    authorizationKey: 'c1l5vkd50gimccout3c03pntbu', // your API key
    key: '4a2c4490-ced1-11e5-9b97-d8a25e8b1578'     // your customer id
  },
  scheduler: {
    featuresRefreshRate:    60, // in 2.x 60 sec, in 1.x 60000 milliseconds
    segmentsRefreshRate:    60, // in 2.x 60 sec, in 1.x 60000 milliseconds
    metricsRefreshRate:     30, // in 2.x 30 sec, in 1.x 30000 milliseconds
    impressionsRefreshRate: 30  // in 2.x 30 sec, in 1.x 30000 milliseconds
  }
});
```

### New features

* Based on users feedback, the new recommended values for all the refresh rates are:

```js
scheduler: {
  featuresRefreshRate:    30, // in 2.x 30 sec, in 1.x 60000 milliseconds (1min)
  segmentsRefreshRate:    60, // in 2.x 60 sec, in 1.x 60000 milliseconds (1min)
  metricsRefreshRate:     60, // in 2.x 60 sec, in 1.x 300000 milliseconds (5min)
  impressionsRefreshRate: 60  // in 2.x 60 sec, in 1.x 300000 milliseconds (5min)
}
```

## 1.0.1 (March 16, 2016)

* Make it public in npm

## 1.0.0 (March 15, 2016)

* Initial public release
